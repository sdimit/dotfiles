* ELPA

#+begin_src emacs-lisp :tangle "init-elpa.el"
  (defvar starter-kit-packages (list
                                'auto-complete
                                'autopair
                                'browse-kill-ring
                                'css-mode
                                'exec-path-from-shell
                                'expand-region
                                'hl-line+
                                'latex-pretty-symbols
                                ;; 'mac-key-mode
                                'magit
                                'markdown-mode
                                'maxframe
                                'multiple-cursors
                                'pandoc-mode
                                'python-mode
                                'ipython
                                'jedi
                                'redo+
                                'ruby-mode
                                's
                                'smex
                                'typopunct
                                'yaml-mode
                                'yasnippet
                                'auctex
                                'r-autoyas
                                )
    "Libraries that should be installed by default.")

    (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                             ("gnu"       . "http://elpa.gnu.org/packages/")
                             ("melpa"     . "http://melpa.milkbox.net/packages/")
                             ("tromey"    . "http://tromey.com/elpa/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")))

(defun starter-kit-elpa-install ()
  "Install all starter-kit packages that aren't installed."
  (interactive)
  (dolist (package starter-kit-packages)
    (unless (or (member package package-activated-list)
                (functionp package))
      (message "Installing %s" (symbol-name package))
      (package-install package))))

(defun esk-online? ()
  "See if we're online.

Windows does not have the network-interface-list function, so we
just have to assume it's online."
  ;; TODO how could this work on Windows?
  (if (and (functionp 'network-interface-list)
           (network-interface-list))
      (some (lambda (iface) (unless (equal "lo" (car iface))
                         (member 'up (first (last (network-interface-info
                                                   (car iface)))))))
            (network-interface-list))
    t))

;On your first run, this should pull in all the base packages.

(when (esk-online?)
  (unless package-archive-contents (package-refresh-contents))
  (starter-kit-elpa-install))

;Make sure the PATH variable is set properly. (Uses exec-path-from-shell package.)
  (when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

#+end_src

* Evil-mode
#+BEGIN_SRC emacs-lisp :tangle "init-evil.el"

  (evil-mode 1)

  ;; don't use evil in the following mode
  (mapc (lambda (mode) (evil-set-initial-state mode 'emacs))
       '(inferior-emacs-lisp-mode
         comint-mode
         compilation-mode
         shell-mode
         eshell-mode
         inferior-python-mode
         inferior-ess-mode
         dired-mode
         term-mode
         deft-mode
         nrepl-mode
         nrepl-repl-mode
         cider-repl-mode
         skewer-repl-mode
         makey-key-mode
         project-explorer-mode
         process-menu-mode
         prodigy-mode
         git-rebase-mode
         Custom-mode
         pycscope-list-entry-mode
         magit-branch-manager-mode))


  ; evil leader mode
  ;(global-evil-leader-mode)

  ; (evil-leader/set-leader "<space>")
  ; (setq evil-leader/in-all-states t)

  (setq evil-want-C-u-scroll t
        evil-cross-lines t
        evil-move-cursor-back nil)

  (defmacro bind (&rest commands)
    "Convience macro which creates a lambda interactive command."
    `(lambda () (interactive) ,@commands))

  (defmacro after (feature &rest body)
    "After FEATURE is loaded, evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,feature
       '(progn ,@body)))

  (defun nmap (kbinding fun) (define-key evil-normal-state-map kbinding fun))
  (defun vmap (kbinding fun) (define-key evil-visual-state-map kbinding fun))
  (defun imap (kbinding fun) (define-key evil-insert-state-map kbinding fun))
  (defun nvmap (kbinding fun) (progn (nmap kbinding fun) (vmap kbinding fun)))

  (nmap (kbd "C-u")         'evil-scroll-up)
  (nmap (kbd "<RET>")       'evil-scroll-down)
  (nmap (kbd "<backspace>") 'evil-scroll-up)
  (nmap (kbd "`")           'universal-argument)

  ; (global-set-key "\\" 'evil-execute-in-normal-state)

  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (defun start-shell ()
     (interactive)
     (ansi-term explicit-shell-file-name))

  ; (define-key evil-normal-state-map ":l" 'cycle-buffer)

  (nmap " k" 'helm-bookmarks)
  (nmap " p" 'helm-browse-project)
  (nmap " g" 'helm-buffers-list)
  (nmap " T" 'helm-etags-select)
  (nmap " f" 'helm-mini)
  (nmap " h" 'highlight-regexp)
  (nmap " H" 'highlight-from-isearch)
  (nmap " u" 'unhighlight-regexp)
  (nmap " j" 'dired-jump)
  (nmap " n" 'linum-mode)
  (nmap " O" 'helm-browse-code)
  (nmap " o" 'idomenu) ;tags
  ;(nmap " O" 'helm-org-headlines)
  (nmap " /" 'helm-swoop)
  (nmap " A" 'ag)
  (nmap " a" 'ag-here-from-point)
  (nmap " e" 'helm-find-files)
  (nmap " i" 'deft)
  (nmap "  " 'ido-switch-buffer)
  (nmap " ll" 'align-regexp)
  (nmap " LL" 'align-cljlet)
  (nmap " q" 'multi-term)
  (nmap "gu" 'browse-url)
  (vmap "gu" 'google-region)
  (nmap "Q" 'kill-current-buffer)
  (global-set-key (kbd "C-S-k") 'kill-current-buffer)
  (nmap "q" 'delete-window)

  ;(nvmap " vf" 'mark-defun)

  (nmap " yf" 'copy-filename-of-current-buffer)
  (nmap " yp" 'copy-full-path-of-current-buffer)

  (nmap (kbd "SPC RET") 'ido-find-file)
  (nmap (kbd "SPC TAB") 'ibuffer-other-window)

  (nmap "j" 'evil-next-visual-line)
  (nmap "k" 'evil-previous-visual-line)
  (nvmap "H" 'evil-first-non-blank)
  (nvmap "L" 'evil-last-non-blank)

  (nmap (kbd "C-f") 'evil-find-char-backward)

  (nmap (kbd "[ RET") (bind (evil-insert-newline-above) (forward-line)))
  (nmap (kbd "] RET") (bind (evil-insert-newline-below) (forward-line -1)))
  (nmap (kbd "[ SPC") (bind (evil-insert -1) (insert " ") (evil-normal-state)))
  (nmap (kbd "] SPC") (bind (evil-append   1) (insert " ") (evil-backward-char 2) (evil-normal-state)))
  ; (nmap (kbd "C-w") 'subword-backward-kill)
  (nmap (kbd "M-<backspace>") 'delete-till-nonblank-char)
  (nmap (kbd "[ e") (kbd "ddkP"))
  (nmap (kbd "] e") (kbd "ddp"))
  (nmap (kbd "[ b") 'previous-buffer)
  (nmap (kbd "] b") 'next-buffer)
  (nmap (kbd "[ q") 'previous-error)
  (nmap (kbd "] q") 'next-error)

#+END_SRC
* IBuffer
#+BEGIN_SRC emacs-lisp :tangle "init-ibuffer.el"

  (require 'ibuffer)

  (define-key ibuffer-mode-map "K" 'ibuffer-do-delete)
  (define-key ibuffer-mode-map "j" 'ibuffer-forward-line)
  (define-key ibuffer-mode-map "k" 'ibuffer-backward-line)
  (define-key ibuffer-mode-map "f" 'ibuffer-jump-to-buffer)

  (nmap ",," 'evil-buffer)

;; default grouping of ibuffer
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("10to8" (filename . "10to8"))
               ("org" (mode . org-mode))
               ("dirs" (mode . dired-mode))
               ("python" (mode . python-mode))
               ("git" (or
                        (mode . magit-status-mode)
                        (mode . magit-diff-mode)))
               ("js" (or
                        (mode . js2-mode)
                        (mode . js3-mode)
                        (mode . coffee-mode)))
               ("clojure" (or
                        (mode . clojure-mode)
                        (mode . cider-repl-mode)))
               ("doc" (or
                        (mode . markdown-mode)
                        (mode . text-mode)))
               ("templates" (or
                              (mode . web-mode)
                              (mode . jade-mode)
                              (mode . css-mode)
                              (mode . less-mode)
                              (mode . style-mode)))
               ("emacs" (or
                         (name . "^.+\\.el$")
                         (name . "^\\*.+\\*$")))))))

 (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))

;; don't ask to kill buffers
(setq ibuffer-expert t)

#+END_SRC

* Smartparens
#+BEGIN_SRC emacs-lisp :tangle "init-smartparens.el"

  (require 'smartparens-config)
  (smartparens-global-mode t)
  (show-smartparens-global-mode t)

  (defun sp-wrap-next-sexp ()
    (interactive)
    (progn (insert "()")
           (evil-backward-char 1)
           (sp-forward-slurp-sexp)
           (evil-insert 1)))

  (define-key sp-keymap (kbd "C-M-n") 'sp-down-sexp)
  (define-key sp-keymap (kbd "C-M-p") 'sp-backward-up-sexp)
  (define-key sp-keymap (kbd "C-M-j") 'sp-next-sexp)
  (define-key sp-keymap (kbd "C-M-k") 'sp-backward-sexp)
  (define-key sp-keymap (kbd "C-M-l") 'sp-forward-symbol)
  (define-key sp-keymap (kbd "C-M-h") 'sp-backward-symbol)
  (define-key sp-keymap (kbd "C-M-a") 'sp-beginning-of-sexp)
  (define-key sp-keymap (kbd "C-M-e") 'sp-end-of-sexp)
  (define-key sp-keymap (kbd "C-M-w") 'sp-wrap-next-sexp)
  (define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)
  (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
  (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)
  (define-key sp-keymap (kbd "C-M-<backspace>") 'sp-kill-sexp)
  (define-key sp-keymap (kbd "C-~") 'sp-kill-symbol)
  (define-key sp-keymap (kbd "C-M-y") 'sp-copy-sexp)
  (define-key sp-keymap (kbd "C-M-<right>") 'sp-forward-slurp-sexp)
  (define-key sp-keymap (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
  (define-key sp-keymap (kbd "C-<left>") 'sp-forward-barf-sexp)
  (define-key sp-keymap (kbd "C-<right>") 'sp-backward-barf-sexp)
  (define-key sp-keymap (kbd "C-M-<up>") 'sp-splice-sexp-killing-around)
  (define-key sp-keymap (kbd "C-M-<down>") 'sp-splice-sexp-killing-forward)
  ;(define-key sp-keymap (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
  ;(define-key sp-keymap (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

  (define-key sp-keymap (kbd "C-M-s j") 'sp-join-sexp)
  (define-key sp-keymap (kbd "C-M-s s") 'sp-split-sexp)

  (define-key sp-keymap (kbd "C-M-]") 'sp-select-next-thing)
  (define-key sp-keymap (kbd "C-M-=") 'sp-indent-defun)

  ;;;;;;;;;;;;;;;;;;
  ;; pair management

  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

  ;;; markdown-mode
  (sp-with-modes '(markdown-mode gfm-mode rst-mode)
    (sp-local-pair "*" "*" :bind "C-*")
    (sp-local-tag "2" "**" "**")
    (sp-local-tag "s" "```scheme" "```")
    (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-match-sgml-tags))

  ;;; tex-mode latex-mode
  (sp-with-modes '(tex-mode plain-tex-mode latex-mode)
    (sp-local-tag "i" "1d5f8e69396c521f645375107197ea4dfbc7b792quot;<" "1d5f8e69396c521f645375107197ea4dfbc7b792quot;>"))

  ;;; html-mode
  (sp-with-modes '(html-mode sgml-mode)
    (sp-local-pair "<" ">"))

  ;;; lisp modes
  (sp-with-modes sp--lisp-modes
    (sp-local-pair "(" nil :bind "C-("))

#+END_SRC

* Editing
#+BEGIN_SRC emacs-lisp :tangle "init-editing.el"
  (require 'thingatpt)
  (require 'imenu)

;; Disable annoying visible bell on OSX
(setq visible-bell nil)

;; Actually, why not disable the annoying audible bell as well
(setq ring-bell-function 'ignore)

;; No slow stupid flyspell. Die!
(eval-after-load "flyspell"
  '(defun flyspell-mode (&optional arg)))

  (setq c-basic-offset 2)

    (load "dired-x")

  (nmap (kbd "M-d") 'mark-defun)
  (nmap (kbd "M-p") 'mark-paragraph)

  ; (nmap (kbd "C-RET") 'other-window)

  (global-set-key (kbd "C-\\") 'comment-dwim)

  (vmap " n" 'narrow-paragraph)

  (setq fill-column 80)
;; Character encodings default to utf-8.
(prefer-coding-system 'utf-8)
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)

  (defun local-column-number-mode ()
     (make-local-variable 'column-number-mode)
     (column-number-mode t))

   (defun local-comment-auto-fill ()
     (set (make-local-variable 'comment-auto-fill-only-comments) t)
     (auto-fill-mode t))

   (defun turn-on-hl-line-mode ()
         (require 'hl-line+)
         (toggle-hl-line-when-idle 1)
         (global-hl-line-mode nil))

   (defun turn-on-save-place-mode ()
     (setq save-place t))

   (defun turn-on-whitespace ()
     (whitespace-mode t))

   (nmap (kbd "[ m") 'flymake-goto-prev-error)
   (nmap (kbd "] m") 'flymake-goto-next-error)

; Don't break lines
(setq-default truncate-lines t)

(setq-default global-visual-line-mode nil)

(add-hook 'inferior-python-mode-hook
   (lambda () (setq-default truncate-lines nil)))
(add-hook 'cider-repl-mode-hook
   (lambda () (setq-default truncate-lines nil)))


(defun delete-till-nonblank-char ()
  (interactive)
  (let ((num-spaces-ahead (skip-chars-forward "\s")))
    (when (< 0 num-spaces-ahead)
      (backward-char num-spaces-ahead)
      (delete-char num-spaces-ahead))))

(defun buffer-contains-string-p (string)
  "Does the current buffer contain STRING? Case sensitive."
  (let ((case-fold-search nil))
    (save-excursion
      (save-match-data
        (goto-char (point-min))
        (search-forward string nil t)))))

      (setq ns-function-modifier 'hyper)

      (prefer-coding-system 'utf-8)
      (set-language-environment 'utf-8)
      (set-default-coding-systems 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-selection-coding-system 'utf-8)

      ;; default tab-width is two spaces
      (setq-default tab-width 2
                    js-indent-level 2
                    c-basic-offset 2
                    indent-tabs-mode nil)

      (require 'highlight-indentation)

      (add-hook 'coffee-mode-hook
                (lambda () (highlight-indentation-current-column-mode)))

        (nmap "[e" 'shift-text-up)
        (nmap "]e" 'shift-text-down)

        (setq c-basic-offset 2)


        (global-set-key "\C-\\" 'comment-region)

      ; show the matching parentheses immediately
      (setq show-paren-delay 0)

      (require 'evil-matchit)
      (global-evil-matchit-mode)

      (defun custom-align () (interactive)
        (let ((start (region-beginning))
              (end   (region-end)))
          (align-regexp start end "=")))

      (vmap " a=" (bind (align-regexp (region-beginning) (region-end) "=")))

    (defun visual-shift-left (start end)
      (interactive "r")
      (save-excursion
        (evil-shift-left start end))
      (evil-visual-restore))

    (defun visual-shift-right ()
      (interactive)
      (let ((start (region-beginning))
            (end (region-end)))
        (progn (evil-shift-right start end)
               (evil-visual-restore))))

    (defun commas-to-newlines (start end)
      (interactive "r")
      (shell-command-on-region
        start end
        "tr , '\n'"
        nil t))

  (defun narrow-paragraph (start end)
    "Narrow region to 80 columns"
    (interactive "r")
    (let ((command "par 79"))
      (shell-command-on-region start end
                               command
                               nil t)))

  (define-key evil-visual-state-map "<" 'visual-shift-left)

  (define-key evil-visual-state-map ">" 'visual-shift-right)

  (define-key evil-normal-state-map " =" 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map " -" 'evil-numbers/dec-at-pt)

  (define-key evil-normal-state-map (kbd "C-c DEL")
     (bind (delete-region (point-min) (point-max))))

  (require 'surround)
  (global-surround-mode 1)

  (idle-highlight t)

  (setq pretty-default-groups '(:function))
  (require 'pretty-mode)
  (global-pretty-mode)

  (require 'pretty-symbols)
  (pretty-symbols-mode)

(defun lorem ()
  "Insert a lorem ipsum."
  (interactive)
  (insert "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do "
          "eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim"
          "ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut "
          "aliquip ex ea commodo consequat. Duis aute irure dolor in "
          "reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla "
          "pariatur. Excepteur sint occaecat cupidatat non proident, sunt in "
          "culpa qui officia deserunt mollit anim id est laborum."))

; TODO use for coffee and clojure
(defun narrow-to-ruby-block ()
  (save-excursion
    (let ((start (progn (ruby-beginning-of-block) (point)))
          (end (progn (ruby-end-of-block) (point))))
      (narrow-to-region start end))))

(defun send-current-line-to-next-window ()
  "Send current line to next window"
  (interactive)
  (let ((current-line (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
        (target (window-buffer (next-window))))
    (with-current-buffer target
      (insert current-line))))

(defun what-face (pos)
  (interactive "d")
  (let ((face (or (get-char-property (point) 'read-face-name)
                  (get-char-property (point) 'face))))
    (if face (message "Face: %s" face) (message "No face at %d" pos))))

 ; Folding

  (defun toggle-folding-buffer (column)
    (interactive "P")
    (set-selective-display
     (if selective-display nil (or column 1))))

  (define-key evil-normal-state-map "zA" 'toggle-folding-buffer)

  (define-key evil-normal-state-map "zf" 'fold-this)

; Transpose chars
; Emulate vim behaviour

  (defun my-transpose-chars ()
    (interactive)
    (transpose-chars -1)
    (evil-forward-char))

  (imap (kbd "C-t") (bind (my-transpose-chars)))

  (nmap (kbd "-") 'rotate-text)

  (require 'multiple-cursors)
  ;; When you have an active region that spans multiple lines, the following will add a cursor to each line:

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

  (global-set-key (kbd "C-S-c C-e") 'mc/edit-ends-of-lines)
  (global-set-key (kbd "C-S-c C-a") 'mc/edit-beginnings-of-lines)
  ; (nmap (kbd "M-.") 'mc/mark-next-like-this)
  ; (nmap (kbd "M-,") 'mc/mark-previous-like-this)
  ; (nmap (kbd "C-c C-<") 'mc/mark-all-like-this)
  ; (nmap (kbd "M-\\") 'set-rectangular-region-anchor)

  (defun comment-and-duplicate-line ()
    "Copy current line to line below and comment current line."
    (interactive)
    (let* ((beg (line-beginning-position))
           (end (line-end-position))
           (line (buffer-substring-no-properties beg end))
           (column (current-column)))
        (comment-region beg end)
        (goto-char (line-end-position))
        (newline)
        (insert line)
        (move-to-column column)))

  (nmap (kbd "gyy") 'comment-and-duplicate-line)


(add-to-list 'load-path (concat dotfiles-dir "contrib/expand-region"))
(require 'expand-region)


#+end_src

* Appearance

#+begin_src emacs-lisp :tangle "init-look.el"

    ;; Less flickery display
    (setq redisplay-dont-pause t)

    ; minimize fringe
    (setq-default indicate-empty-lines nil)
    (put 'upcase-region 'disabled nil)
    (fringe-mode 4)

    (setq initial-scratch-message "")
    (setq inhibit-splash-screen t)
    (setq inhibit-startup-message t)
    (setq redisplay-dont-pause t)
    (set-scroll-bar-mode nil)
  ;  (menu-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (setq tooltip-use-echo-area t)

    (require 'highlight-sexp)

    (defun light-theme ()
      (interactive)
      (load-theme 'solarized-light)
      (setq hl-sexp-background-color "#eee8d5")
      (highlight-sexp-mode t)
      (setq evil-emacs-state-cursor '("red" box))
      (setq evil-normal-state-cursor '("black" box))
      (setq evil-visual-state-cursor '("orange" box))
      (setq evil-insert-state-cursor '("black" bar)))

    (defun dark-theme ()
      (interactive)
      (load-theme 'solarized-dark)
      (setq hl-sexp-background-color "#073642")
      (highlight-sexp-mode t)
      (setq evil-emacs-state-cursor '("yellow" box))
      (setq evil-normal-state-cursor '("white" box))
      (setq evil-visual-state-cursor '("orange" box))
      (setq evil-insert-state-cursor '("white" bar)))

    (defun toggle-dark-light-theme ()
      "Switch between dark and light theme."
      (interactive)
      (if (eq (frame-parameter (next-frame) 'background-mode) 'dark)
        (light-theme)
        (dark-theme)))

    (setq evil-normal-state-tag   (propertize "<N>" 'face '((:background "black"  :foreground "grey" )))
          evil-visual-state-tag   (propertize "<V>" 'face '((:background "orange" :foreground "black")))
          evil-emacs-state-tag    (propertize "<E>" 'face '((:background "yellow" :foreground "black")))
          evil-insert-state-tag   (propertize "<I>" 'face '((:background "red"    :foreground "black")))
          evil-motion-state-tag   (propertize "<M>" 'face '((:background "blue")))
          evil-operator-state-tag (propertize "<O>" 'face '((:background "purple"))))

      (add-hook 'after-change-major-mode-hook
                (lambda ()
                  (when (not (member major-mode '(term-mode
                                                  magit-commit-mode
                                                  magit-status-mode
                                                  magit-log-mode
                                                  magit-diff-mode
                                                  w3m-mode
                                                  cider-repl-mode
                                                  inferior-lisp-mode
                                                  inferior-python-mode
                                                  compilation-mode
                                                  ibuffer-mode)))
                    (setq show-trailing-whitespace t))))

    (nmap (kbd "C-c C-w") 'whitespace-cleanup)

    (dark-theme)

    ; more readable camelCase
    (glasses-mode)
  ;; Subword mode (consider CamelCase chunks as words)
  (global-subword-mode 1)

    (setq evil-default-cursor t)

    (set-face-attribute 'default nil
       :family "PragmataPro"
       :height 180
       :weight 'semi-light
       :width 'normal)

    (setq line-spacing 2)

    ;; No current line highlighting
    (global-hl-line-mode nil)

   (custom-set-faces
   '(region ((t (:background "alternateSelectedControlColor" :foreground "white" :background "#073642")))))

    (defun fullscreen (&optional f)
      (interactive)
      (set-frame-parameter f 'fullscreen
                           (if (frame-parameter f 'fullscreen) nil 'fullboth)))

    (global-set-key (kbd "C-c C-f") 'fullscreen)

    (add-hook 'after-make-frame-functions 'fullscreen)


(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)

   (require 'smart-mode-line)

   (sml/setup)

   (add-to-list 'sml/hidden-modes " GitGutter")
   (add-to-list 'sml/hidden-modes " Lisp Interaction")
   (add-to-list 'sml/hidden-modes " ElDoc")
   (add-to-list 'sml/hidden-modes " hl-sexp")
   (add-to-list 'sml/hidden-modes " Fill")
   (add-to-list 'sml/hidden-modes " AC")
   (add-to-list 'sml/hidden-modes " yas")
   (add-to-list 'sml/hidden-modes " Projectile")
;   (add-to-list 'sml/hidden-modes " pair")
   (add-to-list 'sml/hidden-modes " Wrap")
   (add-to-list 'sml/hidden-modes " vl")
   (add-to-list 'sml/hidden-modes " Undo-Tree")

   (add-to-list 'sml/replacer-regexp-list '("^~/10to8/Native/native/src/core/"      ":DT:"))
   (add-to-list 'sml/replacer-regexp-list '("^~/10to8/Native/native/src/apps/jeltz/app/"      ":Jeltz:"))
   (add-to-list 'sml/replacer-regexp-list '("^~/10to8/Native/native/src/apps/colin/app"     ":Colin:"))

(setq scroll-conservatively 10000
      scroll-step 1)

;; Nicer scrolling with mouse wheel/trackpad.
(unless (and (boundp 'mac-mouse-wheel-smooth-scroll) mac-mouse-wheel-smooth-scroll)
  (global-set-key [wheel-down] (lambda () (interactive) (scroll-up-command 1)))
  (global-set-key [wheel-up] (lambda () (interactive) (scroll-down-command 1)))
  (global-set-key [double-wheel-down] (lambda () (interactive) (scroll-up-command 2)))
  (global-set-key [double-wheel-up] (lambda () (interactive) (scroll-down-command 2)))
  (global-set-key [triple-wheel-down] (lambda () (interactive) (scroll-up-command 4)))
  (global-set-key [triple-wheel-up] (lambda () (interactive) (scroll-down-command 4))))

#+end_src

* Command mode
#+BEGIN_SRC emacs-lisp :tangle "init-command.el"

  (define-key ido-file-completion-map (kbd "C-w") 'ido-delete-backward-updir)

 (ido-vertical-mode t)

(setq ido-enable-tramp-completion nil)
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))

;; Bind `~` to go to homedir when in ido-find-file; http://whattheemacsd.com/setup-ido.el-02.html
(add-hook 'ido-setup-hook
 (lambda ()
   ;; Go straight home
   (define-key ido-file-completion-map
     (kbd "~")
     (lambda ()
       (interactive)
       (if (looking-back "/")
           (insert "~/")
         (call-interactively 'self-insert-command))))))


    ;; no duplicates in command history
    (setq comint-input-ignoredups t)

    (setq comint-scroll-to-bottom-on-input t)

  (defun shell-command-and-replace-region (start end)
    (interactive "r")
    (shell-command-on-region start
                             end
                             (read-shell-command "Shell command on buffer: ")
                             t))

  (defun shell-command-and-replace-buffer ()
    (interactive)
    (shell-command-and-replace-region (point-min) (point-max)))

  (defun shell-command-on-file ()
    (interactive)
    (let* ((command (read-shell-command "Shell command on file: "))
           (filename (file-name-nondirectory buffer-file-name))
           (complete-command (concat command " '" filename "'")))
      (shell-command complete-command)))

  (nmap (kbd "!") 'shell-command)
  (vmap (kbd "!") 'shell-command-on-region)
  (nmap (kbd "C-c !") 'shell-command-and-replace-buffer)
  (nmap (kbd "C-x !") 'shell-command-on-file)
  (vmap (kbd "C-c !") 'shell-command-and-replace-region)

    (defun focus-minibuffer ()
      "switch to minibuffer window (if active)"
      (interactive)
      (when (active-minibuffer-window)
        (select-window (active-minibuffer-window))))

    ; FIXME
    ; (global-set-key (kbd "C-f") 'focus-minibuffer)

  (require 'zlc)
  (setq zlc-select-completion-immediately t)

  ;; no duplicates in command history
  (setq comint-input-ignoredups t)

  (setq enable-recursive-minibuffers t)

  (defun my-minibuffer-insert-word-at-point ()
    "Get word at point in original buffer and insert it to minibuffer."
    (interactive)
    (let (word beg)
      (with-current-buffer (window-buffer (minibuffer-selected-window))
        (save-excursion
          (skip-syntax-backward "w_")
          (setq beg (point))
          (skip-syntax-forward "w_")
          (setq word (buffer-substring-no-properties beg (point)))))
      (when word
        (insert word))))

  ; (add-hook 'minibuffer-setup-hook (lambda () (local-set-key (kbd "C-w") 'my-minibuffer-insert-word-at-point)))

  (add-hook 'minibuffer-setup-hook (lambda () (local-set-key (kbd "C-w") 'ido-delete-backward-updir)))

  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

  ; (define-key ido-completion-map (kbd "M-.") 'smex-find-function)
  ; (define-key ido-completion-map (kbd "C-c C-d") 'smex-find-function)

  (add-hook 'ack-mode-hook 'ansi-color-for-comint-mode-on)


#+END_SRC

* Navigation
#+begin_src emacs-lisp :tangle "init-navigation.el"

  (winner-mode 1)
  (global-set-key (kbd "C-c <up>") 'winner-undo)
  (global-set-key (kbd "C-c <down>") 'winner-redo)

  ; TODO use "window prefix" (e.g. "C-a" as in tmux)
  ; (global-set-key (kbd "C-. l") 'evil-window-right)
  ; (global-set-key (kbd "C-. h") 'evil-window-left)


  (defun jump-to-tag ()
    (interative)
    (if (eq major-mode 'clojure-mode)
        (call-interactively 'cider-jump)
        (call-interactively 'find-tag)))

  (nmap (kbd "M-.") 'jump-to-tag)

  ; (define-key evil-normal-state-map [escape] 'winner-undo)

   (windmove-default-keybindings)
   (setq windmove-wrap-around t)

  ;; resizing 'windows' (i.e., inside the frame)
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)

  (defun toggle-minimap ()
    (interactive)
    (if (minimap-visible-p)
        (minimap-kill)
      (minimap-create)))

  ;; (global-evil-tabs-mode t)
  ;; (nmap " tk" 'elscreen-kill)
  ;; (nmap " tn" 'elscreen-create)
  ;; (nmap " tN" (bind (evil-tabs-tabedit (buffer-file-name))))
  ;; (nmap " tt" 'elscreen-next)
  ;; (nmap " tT" 'elscreen-previous)

  (defun assign-f1-bookmark-to-buffer ()
    (interactive)
    (setq f1-bookmark-buffer (buffer-name (current-buffer)))
    (nmap (kbd "<f1>") (bind (switch-to-buffer-other-window f1-bookmark-buffer))))

  (defun assign-f2-bookmark-to-buffer ()
    (interactive)
    (setq f2-bookmark-buffer (buffer-name (current-buffer)))
    (nmap (kbd "<f2>") (bind (switch-to-buffer-other-window f2-bookmark-buffer))))

  ; TODO make generic

  ; (defun assign-key-bookmark-to-buffer (key)
  ;   (interactive "M")
  ;   (setq v (make-symbol (concat key "key")))
  ;   (message (concat "hi" v)))

  (require 'smex)
  (smex-initialize)

  (nvmap ":" 'smex)

  (global-set-key (kbd "M-x") 'smex) ; for emacs-mode
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)

  (nvmap (kbd "SPC :") 'evil-ex)

  (setq smex-show-unbound-commands t)
  (smex-auto-update 30)

  (setq mac-option-modifier 'meta)

  ; some shortcuts from evil-ex for M-x

  (defun w ()
    ":w shortcut"
    (interactive)
    (save-buffer))

  (defun only ()
    ":only"
    (interactive)
    (delete-other-windows))

  (nmap (kbd "C-/") 'only)

#+end_src

* Search
#+begin_src emacs-lisp :tangle "init-search.el"

      (require 'ack-and-a-half)
      ;; Create shorter aliases
      (defalias 'ack 'ack-and-a-half)
      (defalias 'ack-same 'ack-and-a-half-same)
      (defalias 'ack-find-file 'ack-and-a-half-find-file)
      (defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)
      ; (define-key global-map "\C-x a" 'ack)

      ; Interface with Ag, the silver search

      (require 'ag)
      (setq ag-highlight-search t)
      ; (setq ag-reuse-window 't)
      (setq ag-reuse-buffers 't)

      ; Activate occur easily inside isearch
      (define-key isearch-mode-map (kbd "C-o")
        (lambda () (interactive)
          (let ((case-fold-search isearch-case-fold-search))
            (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))

      ; Use regex searches by default.
      (global-set-key (kbd "C-s") 'isearch-forward-regexp)
      (global-set-key (kbd "\C-r") 'isearch-backward-regexp)

      (defun highlight-from-isearch ()
        (interactive)
        (let ((input (if isearch-regexp
                         isearch-string
                         (regexp-quote isearch-string))))
          (highlight-regexp input)))

      (defun ag-from-point ()
        "Search using ag in current directory,
         with STRING defaulting to the symbol under point."
        (interactive)
        (let ((ido-report-no-match nil)
              (ido-auto-merge-work-directories-length -1)
              (directory (file-name-directory (or load-file-name buffer-file-name)))
              (string (ag/dwim-at-point))
              (ag-function (apply-partially 'ag/search 'string)))
          (ido-file-internal 'ag-function)))

      (defun ag-here-from-point ()
        "Search using ag in current directory,
         with STRING defaulting to the symbol under point."
         (interactive)
         (let ((directory (file-name-directory (or load-file-name buffer-file-name)))
               (string (ag/dwim-at-point)))
           (ag/search string directory)))

      (defun show-ag () (interactive) (switch-to-buffer-other-window "*ag*"))
      (defun kill-ag () (interactive) (kill-buffer "*ag*"))

      (define-key evil-motion-state-map (kbd "C-'") 'next-error)
      (define-key evil-motion-state-map (kbd "C-:") 'previous-error)
      (define-key evil-motion-state-map (kbd "C-;") 'show-ag)
      (define-key evil-motion-state-map (kbd "C-\"") 'kill-ag)

    ;; (defun evil-ex-search-and-replace ()
    ;;   ""
    ;;   (interactive)
    ;;   (evil-ex)
    ;;   (insert "s///cg"))

    ;; (vmap "rr" 'evil-ex-search-and-replace)


  (defun evilcvn--change-symbol(fn)
    (let ((old (thing-at-point 'symbol)))
      (funcall fn)
      (unless (evil-visual-state-p)
        (evil-visual-state))
      (evil-ex (concat "'<,'>s/" (if (= 0 (length old)) "" "\\<\\(") old (if (= 0 (length old)) "" "\\)\\>/"))))
    )

  (defun change-symbol-in-whole-buffer()
    "mark the region in whole buffer and use string replacing UI in evil-mode
  to replace the symbol under cursor"
    (interactive)
    (evilcvn--change-symbol 'mark-whole-buffer)
    )

  (defun change-symbol-in-defun ()
    "mark the region in defun (definition of function) and use string replacing UI in evil-mode
  to replace the symbol under cursor"
    (interactive)
    (evilcvn--change-symbol 'mark-defun)
    )

  (nmap " rr" 'change-symbol-in-whole-buffer)
  (nmap " rf" 'change-symbol-in-defun)


  (when (require 'browse-kill-ring nil 'noerror)
  (browse-kill-ring-default-keybindings))

  ; (define-key evil-normal-state-map (kbd "C-]") 'helm-etags-select)

; Convenience Function to search for regexps build with re-builder

  (defun reb-query-replace (to-string)
      "Replace current RE from point with `query-replace-regexp'."
      (interactive
       (progn (barf-if-buffer-read-only)
              (list (query-replace-read-to (reb-target-binding reb-regexp)
                                           "Query replace"  t))))
      (with-current-buffer reb-target-buffer
        (query-replace-regexp (reb-target-binding reb-regexp) to-string)))

(defun google-region ()
  "Googles a query or region if any."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Google: ")))))


#+end_src
* Help
#+begin_src emacs-lisp :tangle "init-help.el"

  (require 'discover)
  (global-discover-mode 1)

  (global-set-key (kbd "C-h a") 'apropos)
  ; same as C-h f
  (global-set-key (kbd "C-h C-f") 'describe-function)
  (global-set-key (kbd "C-h C-s") 'find-function)
  (global-set-key (kbd "C-h C-f") 'describe-function)
  (global-set-key (kbd "C-h C-s") 'find-function)
;  (global-set-key (kbd "C-h C-s") 'smex-find-function)

  (global-set-key (kbd "C-h h") nil)

  (define-key emacs-lisp-mode-map (kbd "C-c C-d") 'describe-function)
  (define-key emacs-lisp-mode-map (kbd "C-c C-s") 'find-function)

  ; Dash (OSX)

  (autoload 'dash-at-point "dash-at-point"
            "Search the word at point with Dash." t nil)

  (require 'dash-at-point)
  (nmap " d" 'dash-at-point)
  ; TODO use ido completion
  (nmap " D" 'dash-at-point-with-docset)

  (add-hook 'js3-mode-hook
     (lambda () (setq dash-at-point-docset "js")))

  (add-hook 'python-mode-hook
     (lambda () (setq dash-at-point-docset "python")))

  (add-hook 'coffee-mode-hook
     (lambda () (setq dash-at-point-docset "coffee")))





  (require 'popup)

  (defun describe-thing-in-popup ()
    (interactive)
    (let ((description (save-window-excursion
                         (help-xref-interned (symbol-at-point))
                         (switch-to-buffer "*Help*")
                         (buffer-string))))
      (popup-tip description
                 :point (point)
                 :around t
                 :height 30
                 :scroll-bar t
                 :margin t)))

   (nmap (kbd "C-c d") 'describe-thing-in-popup)


#+end_src
* Completion

#+begin_src emacs-lisp :tangle "init-completion.el"

(global-set-key (kbd "C-c C-q") 'start-kbd-macro)
(global-set-key (kbd "C-c q") 'end-kbd-macro)

(setq-default ac-dwim nil)


  (require 'fuzzy)
  (require 'auto-complete)

  (setq ac-auto-show-menu t
        ac-quick-help-delay 0.2
        ac-use-fuzzy t
        ac-auto-start t
        ac-comphist-file (concat user-emacs-directory ".cache/ac-comphist.dat")
        ac-quick-help-height 30
        ac-show-menu-immediately-on-auto-complete t)

  (after 'auto-complete
    (define-key ac-completing-map (kbd "C-n") 'ac-next)
    (define-key ac-completing-map (kbd "C-p") 'ac-previous))

  (global-auto-complete-mode +1)

(setq-default ac-sources '(ac-source-words-in-buffer
                           ac-source-words-in-same-mode-buffers
                           ac-source-dictionary
                           ac-source-filename))

  (require 'yasnippet)
  (yas-global-mode 1)

  (define-key yas-minor-mode-map (kbd "C-c C-j") 'yas-expand)

  ;; Yasnippets, always
  (eval-after-load "yasnippet"
    '(setq-default ac-sources (append '(ac-source-yasnippet) ac-sources)))

  ;; Hippie expand: look in buffer before filenames please
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol))


  (defun hippie-expand-lines ()
    (interactive)
    (let ((hippie-expand-try-functions-list '(try-expand-line
                                              try-expand-line-all-buffers)))
      (hippie-expand nil)))

  (define-key evil-insert-state-map "\C-l" 'hippie-expand)
  (define-key evil-insert-state-map (kbd "C-x C-l") 'hippie-expand-lines)

  ; (define-abbrev global-abbrev-table "atr" "attributes")
  ; (abbrev-mode 1)

#+end_src

* LaTeX
#+BEGIN_SRC emacs-lisp :tangle "init-latex.el"

    ; ;; custom variables kludge. Why can't I get these to work via setq?
    ; (custom-set-variables
    ; ;; custom-set-variables was added by Custom.
    ; ;; If you edit it by hand, you could mess it up, so be careful.
    ; ;; Your init file should contain only one such instance.
    ; ;; If there is more than one, they won't work right.
    ; '(LaTeX-XeTeX-command "xelatex -synctex=1")
    ; '(TeX-engine (quote xetex))
    ; ;; '(TeX-view-program-list (quote (("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b"))))
    ; ;; '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Skim") (output-html "xdg-open"))))
    ; '(show-paren-mode t)
    ; '(blink-cursor-mode nil)
    ; '(text-mode-hook (quote (text-mode-hook-identify)))
    ; )

   ; Configure org-mode to export directly to PDF using pdflatex or
   ; xelatex, compiling the bibliography as it goes, with my preferred
   ; setup in each case. There is a good deal of local stuff in this section. The required style files used below are available at https://github.com/kjhealy/latex-custom-kjh. You may need to adjust or remove some of these settings depending on your
   ; preferences and local configuration.

    (require 'org-latex)
    ;; Choose either listings or minted for exporting source code blocks.
    ;; Using minted (as here) requires pygments be installed. To use the
    ;; default listings package instead, use
    ;; (setq org-export-latex-listings t)
    ;; and change references to "minted" below to "listings"
    (setq org-export-latex-listings 'minted)

    ;; default settings for minted code blocks
    (setq org-export-latex-minted-options
          '(;("frame" "single")
            ("bgcolor" "bg") ; bg will need to be defined in the preamble of your document. It's defined in org-preamble-pdflatex.sty and org-preamble-xelatex.sty below.
            ("fontsize" "\\small")
            ))
  ;; turn off the default toc behavior; deal with it properly in headers to files.
  (defun org-export-latex-no-toc (depth)
      (when depth
        (format "%% Org-mode is exporting headings to %s levels.\n"
                depth)))
  (setq org-export-latex-format-toc-function 'org-export-latex-no-toc)

    (add-to-list 'org-export-latex-classes
                 '("memarticle"
                   "\\documentclass[11pt,oneside,article]{memoir}\n\\input{vc} % vc package"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-export-latex-classes
                 '("membook"
                   "\\documentclass[11pt,oneside]{memoir}\n\\input{vc} % vc package"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
    ;; but adapted to use latexmk 4.22 or higher.
    (defun my-auto-tex-cmd ()
      "When exporting from .org with latex, automatically run latex,
                       pdflatex, or xelatex as appropriate, using latexmk."
      (let ((texcmd)))
      ;; default command: pdflatex
      (setq texcmd "latexmk -pdflatex='pdflatex -synctex=1 --shell-escape --' -pdf %f")
      ;; pdflatex -> .pdf
      (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
          (setq texcmd "latexmk -pdflatex='pdflatex -synctex=1 --shell-escape' -pdf %f"))
      ;; xelatex -> .pdf
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq texcmd "latexmk -pdflatex='xelatex -synctex=1 --shell-escape' -pdf %f"))
      ;; LaTeX compilation command
      (setq org-latex-to-pdf-process (list texcmd)))

    (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)

    ;; Default packages included in /every/ tex file, latex, pdflatex or xelatex
    (setq org-export-latex-packages-alist
          '(("" "graphicx" t)
            ("" "longtable" nil)
            ("" "float" )))

    ;; Custom packages
    (defun my-auto-tex-parameters ()
      "Automatically select the tex packages to include. See https://github.com/kjhealy/latex-custom-kjh for the support files included here."
      ;; default packages for ordinary latex or pdflatex export
      (setq org-export-latex-default-packages-alist
            '(("AUTO" "inputenc" t)
              ("minted,minion" "org-preamble-pdflatex" t)))
      ;; Packages to include when xelatex is used
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq org-export-latex-default-packages-alist
                '(("minted" "org-preamble-xelatex" t) ))))

    (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)


    ; ebib is a bibtex database manager that works inside emacs. It can
    ; talk to org-mode. See [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-17_2][this Worg tutorial]] for details.

    (org-add-link-type "ebib" 'ebib)

   (org-add-link-type
     "cite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "cite:" desc)))
               (format "\\cite{%s}" path)
               (format "\\cite[%s]{%s}" desc path)
               )))))

   (org-add-link-type
     "parencite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "parencite:" desc)))
               (format "\\parencite{%s}" path)
               (format "\\parencite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
     "textcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "textcite:" desc)))
               (format "\\textcite{%s}" path)
               (format "\\textcite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
     "autocite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "autocite:" desc)))
               (format "\\autocite{%s}" path)
           (format "\\autocite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
   "footcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "footcite:" desc)))
           (format "\\footcite{%s}" path)
         (format "\\footcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "fullcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "fullcite:" desc)))
           (format "\\fullcite{%s}" path)
         (format "\\fullcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "citetitle" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitle:" desc)))
           (format "\\citetitle{%s}" path)
         (format "\\citetitle[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "citetitles" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitles:" desc)))
           (format "\\citetitles{%s}" path)
         (format "\\citetitles[%s]{%s}" desc path)
         )))))

  (org-add-link-type
     "headlessfullcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "headlessfullcite:" desc)))
               (format "\\headlessfullcite{%s}" path)
               (format "\\headlessfullcite[%s]{%s}" desc path)
  )))))

#+end_src

* Web-mode
#+BEGIN_SRC emacs-lisp :tangle "init-web.el"

(require 'web-mode)

(add-to-list 'auto-mode-alist '("\\.html$" . web-mode))

(define-key web-mode-map (kbd "C-n") 'web-mode-tag-match)
(define-key web-mode-map (kbd "C-f") 'web-mode-fold-or-unfold)
(define-key web-mode-map (kbd "C-'") 'web-mode-mark-and-expand)

(set-face-attribute 'web-mode-html-tag-face nil :foreground "DarkViolet")

(add-hook 'web-mode-hook 'zencoding-mode)

(require 'multi-web-mode)

;; Use multi-web-mode for editing code embedded in HTML.
(setq mweb-default-major-mode 'html-mode)
(let ((mweb-possible-tags
      '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
        (js-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
        (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")
        (ruby-mode "<\\%=\\|<\\% " "\\-%>\\|\\%>"))))
  (dolist (cell mweb-possible-tags)
    (when (fboundp (car cell))
      (push cell mweb-tags))))
(setq mweb-filename-extensions '("html" "phtml" "erb"))
(multi-web-global-mode 1)

#+END_SRC
* Lisp
#+begin_src emacs-lisp :tangle "init-lisp.el"

  (global-set-key (kbd "C-c e") 'eval-and-replace)
  (global-set-key (kbd "C-M-x") 'eval-defun)

(defun scratch ()
  (switch-to-buffer "*scratch*"))

(global-set-key (kbd "C-c e e") 'eval-and-replace)
(global-set-key (kbd "C-c e r") 'eval-region)
(global-set-key (kbd "C-c e f") 'eval-defun)
(global-set-key (kbd "C-c e b") 'eval-buffer)
(global-set-key (kbd "C-c e s") 'scratch)

; (global-set-key (kbd "C-h e k") 'find-function-on-key)
; (global-set-key (kbd "C-h e e") 'view-echo-area-messages)
; (global-set-key (kbd "C-h e l") 'find-library)

(global-rainbow-delimiters-mode)

(add-hook 'clojure-mode-hook 'highlight-sexp-mode)
(add-hook 'emacs-lisp-mode-hook 'highlight-sexp-mode)

;(add-hook 'ielm-mode-hook 'ielm-auto-complete)

(defun my-eval-region ()
  (interactive)
  (let ((start (region-beginning))
        (end (region-end)))
  (cond
     ((eq major-mode 'coffee-mode)
         (coffee-compile-region start end))
     ((eq major-mode 'stylus-mode)
         (my-stylus-compile-region start end))
     ((eq major-mode 'clojure-mode)
         (cider-eval-region start end))
     (t (eval-region start end)))))

(vmap (kbd "C-c C-r") 'my-eval-region)

;; symbols for some overlong function names
(eval-after-load 'emacs-lisp-mode
  '(font-lock-add-keywords
    'emacs-lisp-mode
    (mapcar
     (lambda (pair)
       `(,(car pair)
         (0 (progn (compose-region
                    (match-beginning 0) (match-end 0)
                    ,(cadr pair))
                   nil))))
     '(("\\<defun\\>" ?ƒ)
       ("\\<or\\>" ?<)
       ("\\<not\\>" ?^)
       ("\\<nil\\>" ?Ø)
       ("\\<interactive\\>" ?ι)
       ))))

  (require 'highlight-sexp)
  (add-hook 'emacs-lisp-mode-hook 'highlight-sexp-mode)

(defun trace-errors ()
  (interactive)
  (if (eq nil debug-on-error)
    (progn
       (setq debug-on-error t)
       (message "enabled"))
    (progn
       (setq debug-on-error nil)
       (message "disabled"))))

#+end_src

* Clojure
#+begin_SRC emacs-lisp :tangle "init-clojure.el"

    (add-hook 'clojure-mode-hook 'highlight-sexp-mode)

  ; fourclojure
  (add-to-list 'load-path "~/.emacs.d/src/4clj-el/")
  (require 'four-clj)

(font-lock-add-keywords 'clojure-mode
                        '(("(\\|)" . 'esk-paren-face)))

(defface esk-clojure-trace-face
   '((((class color) (background dark))
      (:foreground "grey50"))
     (((class color) (background light))
      (:foreground "grey55")))
   "Face used to dim parentheses."
   :group 'starter-kit-faces)

(setq esk-clojure-trace-face 'esk-clojure-trace-face)

 ; ;; font-lock
 ;  (dolist (x '((true        т)
 ;               (false       ғ)
 ;               (:keys       ӄ)
 ;               (nil         Ø)
 ;               (partial     ∂)
 ;               (with-redefs я)
 ;               (fn          ƒ)
 ;               (comp        º)
 ;               (not         ¬)
 ;               (apply       ζ)
 ;               (interaction ι)
 ;               (a-fn1       α)
 ;               (a-fn2       β)
 ;               (a-fn3       γ)
 ;               (no-op       ε)))
 ;    (eval-after-load 'clojure-mode
 ;      '(font-lock-add-keywords
 ;        'clojure-mode `((,(concat "[\[({[:space:]]"
 ;                                  "\\(" (symbol-name (first x)) "\\)"
 ;                                  "[\])}[:space:]]")
 ;                         (0 (progn (compose-region (match-beginning 1)
 ;                                                   (match-end 1) ,(symbol-name (second x)))
 ;                                   nil))))))
 ;    (eval-after-load 'clojure-mode
 ;      '(font-lock-add-keywords
 ;        'clojure-mode `((,(concat "^"
 ;                                  "\\(" (symbol-name (first x)) "\\)"
 ;                                  "[\])}[:space:]]")
 ;                         (0 (progn (compose-region (match-beginning 1)
 ;                                                   (match-end 1) ,(symbol-name (second x)))
 ;                                   nil))))))
 ;    (eval-after-load 'clojure-mode
 ;      '(font-lock-add-keywords
 ;        'clojure-mode `((,(concat "[\[({[:space:]]"
 ;                                  "\\(" (symbol-name (first x)) "\\)"
 ;                                  "$")
 ;                         (0 (progn (compose-region (match-beginning 1)
 ;                                                   (match-end 1) ,(symbol-name (second x)))
 ;                                   nil)))))))


  ;; Cider configuration
  (require 'cider)
  (setq nrepl-hide-special-buffers t
        cider-repl-pop-to-buffer-on-connect nil
        cider-popup-stacktraces nil
        cider-repl-popup-stacktraces nil)

  (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  (add-hook 'cider-repl-mode-hook 'subword-mode)
  ;; (define-key cider-mode-map (kbd "C-c d") 'ac-nrepl-popup-doc)

  (require 'clj-refactor)
  (add-hook 'clojure-mode-hook (lambda () (clj-refactor-mode 1)))

;; specify the print length to be 100 to stop infinite sequences killing things.
(defun live-nrepl-set-print-length ()
  (nrepl-send-string-sync "(set! *print-length* 100)" "clojure.core"))

(add-hook 'nrepl-connected-hook 'live-nrepl-set-print-length)

    (defun toggle-nrepl-buffer ()
      "Toggle the nREPL REPL on and off"
      (interactive)
      (if (string= (buffer-name (current-buffer)) "*cider-repl*")
          (delete-window)
        (cider-switch-to-repl-buffer nil)))

;; Switch a Clojure nrepl to ClojureScript

(defun nrepl-start-noderepl ()
  (interactive)
  (save-excursion
    (nrepl-switch-to-repl-buffer nil)
    (insert "(require 'cljs.repl.node) (cljs.repl.node/run-node-nrepl)")
    (nrepl-send-input)))

;;Kibit
(require 'compile)
(add-to-list 'compilation-error-regexp-alist-alist
             '(kibit "At \\([^:]+\\):\\([[:digit:]]+\\):" 1 2 nil 0))
(add-to-list 'compilation-error-regexp-alist 'kibit)

(defun kibit ()
  "Run kibit on the current project.
Display the results in a hyperlinked *compilation* buffer."
  (interactive)
  (compile "lein kibit"))

;(require 'cider)

(setq nrepl-hide-special-buffers t)

; temporary fix for cider melpa issues
(defun cider--library-version ()
  "Get the version in the nrepl library header."
  ;; (-when-let (version (pkg-info-library-version 'cider))
  ;;   (pkg-info-format-version version))
  "0.3.0-SNAPSHOT")

  (defun return-or-eval-last-and-forward ()
    (interactive)
    (if (eq major-mode 'clojure-mode)
      (progn
         (cider-eval-last-sexp)
         (sp-forward-sexp))
      (call-interactively 'evil-scroll-down)))

  (nmap (kbd "RET") 'return-or-eval-last-and-forward)

  (defun return-or-eval-pretty-last-and-forward ()
    (interactive)
    (if (eq major-mode 'clojure-mode)
      (progn
         (cider-eval-pprint-last-sexp)
         (sp-forward-sexp))))

  ; (nmap (kbd "C-RET") 'return-or-eval-pretty-last-and-forward)

    ; (defun coffee-open-above ()
    ;   (interactive)
    ;   (if (eq major-mode 'coffee-mode)
    ;     (progn (evil-previous-visual-line)
    ;         (coffee-open-below))
    ;     (evil-open-above 1)))


#+END_SRC

* Python/Django
#+BEGIN_SRC emacs-lisp :tangle "init-python.el"

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

  (exec-path-from-shell-copy-env "PYTHONPATH")

  (setq-default flymake-python-pyflakes-extra-arguments '("--ignore=E501"))
  ; don't bug me about E501 (warning about lines > 80 chars)

  ; (add-to-list 'helm-boring-file-regexp-list '("\\.pyc"))

  (add-hook 'python-mode-hook
            (lambda () (highlight-indentation-current-column-mode)))

  (defvar nose-use-verbose nil)

  (defun pudb ()
    "Add a break point"
    (interactive)
    (newline-and-indent)
    (insert "import pudb; pudb.set_trace()")
    (highlight-lines-matching-regexp "^[ ]*import pudb; pudb.set_trace()"))

  (defun ipdb ()
    "Add a break point"
    (interactive)
    (newline-and-indent)
    (insert "import ipdb; ipdb.set_trace()")
    (highlight-lines-matching-regexp "^[ ]*import ipdb; ipdb.set_trace()"))

  ; PYCSCOPE
  (add-to-list 'load-path "~/.emacs.d/src/xpycscope/")
  (require 'xpycscope)

  (setq pycscope-use-face nil)
  (setq pycscope-display-pycscope-buffer nil)
  (setq pycscope-truncate-lines t)

  (add-hook 'python-mode-hook 'auto-complete-mode)
  (add-hook 'python-mode-hook 'jedi:ac-setup)

  (setq jedi:setup-keys nil)
  (setq jedi:complete-on-dot t)
  (setq jedi:tooltip-method t)

(defun elpy-nav-forward-class-definition ()
  "Move forward to the next class definition."
  (interactive)
  (if (save-excursion
        (forward-char 1)
        (re-search-forward "^ *\\(class\\) " nil t))
      (goto-char (match-beginning 1))
    (goto-char (point-max))))

(defun elpy-nav-backward-class-definition ()
  "Move forward to the previous class definition."
  (interactive)
  (if (save-excursion
        (forward-char -1)
        (re-search-backward "^ *\\(class\\) " nil t))
      (goto-char (match-beginning 1))
    (goto-char (point-min))))

  (require 'elpy)
  ;(elpy-enable)

   (add-hook 'python-mode-hook (lambda ()
     (define-key python-mode-map (kbd "C-]") 'pycscope-find-global-definition-no-prompting)
     (define-key python-mode-map (kbd "C-t") 'pycscope-pop-mark)
     (define-key python-mode-map (kbd "C-.") 'pycscope-find-global-definition)
     (define-key python-mode-map "(" 'elpy-nav-backward-statement)
     (define-key python-mode-map ")" 'elpy-nav-forward-statement)
     (define-key python-mode-map "[" 'elpy-nav-backward-definition)
     (define-key python-mode-map "]" 'elpy-nav-forward-definition)
     (define-key python-mode-map "{" 'elpy-nav-backward-class-definition)
     (define-key python-mode-map "}" 'elpy-nav-forward-class-definition)
     ;(define-key python-mode-map " c" 'elpy-occur-definitions)
     (define-key python-mode-map (kbd "C-c d") 'jedi:show-doc)
     (define-key python-mode-map (kbd "C-c C-n") 'jedi:dot-complete)))

     (define-key python-mode-map (kbd "C-]") 'pycscope-find-global-definition-no-prompting)

  (defun find-tag-generic ()
    (interactive)
    (if (eq major-mode 'python-mode)
      (pycscope-find-global-definition-no-prompting)
      (evil-jump-to-tag)))

  (nmap (kbd "C-]") 'find-tag-generic)

  ; (setq flymake-python-pyflakes-executable "flake8")
  ; (require 'flymake-python-pyflakes)
  ; (add-hook 'python-mode-hook 'flymake-python-pyflakes-load)


; highlight Django templating stuff
(defvar django-tag-face (make-face 'django-tag-face))
(set-face-foreground 'django-tag-face "Orange")
;
(defvar django-variable-face (make-face 'django-variable-face))
(set-face-foreground 'django-variable-face "Green")

(defvar django-comment-face (make-face 'django-comment-face))
(set-face-foreground 'django-comment-face "Gray")

(font-lock-add-keywords
 'html-mode
 '(
   ("\\({%[^%]*%}\\)" 1 django-tag-face prepend)
   ("\\({{[^}]*}}\\)" 1 django-variable-face prepend)
   ("\\({#[^}]*#}\\)" 1 django-comment-face prepend)
   ("\\({% comment %}\\(.\\|
\\)*{% endcomment %}\\)" 1 django-comment-face prepend)
   ))


; skeletons for Django template tags
(define-skeleton template-tag-skeleton
  "Insert a {% foo %} template tag"
  "Template tag name: "
  "{% " str " %}")
(define-skeleton template-variable-skeleton
  "Insert a {{ foo }} template variable"
  "Template variable: "
  "{{ " str " }}")
(define-skeleton template-comment-skeleton
  "Insert a {# foo #} template variable"
  "Comment: "
  "{# " str " #}")
(define-skeleton template-block-skeleton
  "Insert {% block foo %}{% endblock %}"
  "Block name: "
  "{% block " str " %}\n" - "\n{% endblock %}")
(define-skeleton template-if-else-skeleton
  "Insert {% if foo %}{% else %}{% endif %}"
  "If condition: "
  "{% if " str " %}\n" - "\n{% else %}\n\n{% endif %}")
(define-skeleton template-if-skeleton
  "Insert {% if foo %}{% endif %}"
  "If condition: "
  "{% if " str " %}" - "{% endif %}")
(define-skeleton underscore-skeleton
  "Insert <%= foo %>"
  "Contents: "
  "<%= " str " %>")

(defvar template-skeletons
  '(template-tag-skeleton
    template-variable-skeleton
    template-comment-skeleton
    template-block-skeleton
    template-if-skeleton
    template-if-else-skeleton
    underscore-skeleton))

(defun insert-django-skeleton ()
  (interactive)
  (let* ((skeleton-names (mapcar 'symbol-name template-skeletons))
        (skeleton-chosen (ido-completing-read "HTML skeleton: " skeleton-names)))
    (funcall (intern skeleton-chosen))))


; (define-key html-mode-map "\C-ct" 'insert-django-skeleton)

; (defun visit-parent-django-template ()
;   "In a buffer containg {% extends \"foo.html\" %}, visit foo.html."
;   (interactive)
;   (let (start-pos end-pos template-name)
;     (save-excursion
;       (widen)
;       (goto-char (point-min))
;       ;; Find the extends tag
;       (while (not (looking-at "{% ?extends"))
;         (forward-char 1))
;       ;; Find the opening " of the file name.
;       (while (not (looking-at "\""))
;         (forward-char 1))
;       (forward-char)
;       (setq start-pos (point))

;       ;; Find the closing "
;       (while (not (looking-at "\""))
;         (forward-char 1))
;       (setq end-pos (point))

;       (setq template-name (buffer-substring-no-properties start-pos end-pos)))

;     ;; Open this file, assuming it's in the same directory.
;     ;; TODO: Search the current VCS checkout for it.
;     (find-file template-name)))

#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp :tangle "init-helm.el"

(setq helm-input-idle-delay 0.1)
(setq helm-idle-delay 0.1)
(setq helm-buffer-details-flag nil)
(setq helm-ff-transformer-show-only-basename t)

#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp :tangle "init-git.el"

     (setq ediff-highlight-all-diffs nil)

     (setq magit-save-some-buffers 'dontask)
    (setq magit-stage-all-confirm nil)
    (setq magit-unstage-all-confirm nil)

    (add-hook 'magit-log-edit-mode-hook
              (lambda ()
                 (set-fill-column 72)
                 (auto-fill-mode 1)))
     (eval-after-load 'diff-mode
       '(progn
          (set-face-foreground 'diff-added "green4")
          (set-face-foreground 'diff-removed "red3")))

     (eval-after-load 'magit '(progn
        (set-face-foreground 'magit-diff-add "green3")
        (set-face-foreground 'magit-diff-del "red3")))

       (defun magit-status-only ()

          (interactive)
          (magit-status default-directory)
          (delete-other-windows))

       (defun magit-log-current-file ()
          (interactive)
          (magit-file-log (buffer-file-name (current-buffer))))

    ;; close popup when commiting

    (defadvice git-commit-commit (after delete-window activate)
      (delete-window))

      (global-git-gutter+-mode t)

      (setq git-gutter+-modified-sign ".")

      (nmap " mka" 'git-gutter+-stage-hunks) ; [m]agit hun[k] [a]dd
      (nmap " mkd" (bind (git-gutter+-popup-hunk)
                         (switch-to-buffer-other-window "*git-gutter+-diff*")))
                                             ; [m]agit hun[k] show [d]iff
      (nmap " mkK" 'git-gutter+-revert-hunk) ; [m]agit hun[k] [k]ill
      (nmap " mkm" 'git-messenger:popup-message) ; [m]agit hun[k] show [m]essage
      (nmap "[g" 'git-gutter+-next-hunk)
      (nmap "]g" 'git-gutter+-previous-hunk)

      (nmap " mbb" 'magit-blame-mode)
      (nmap " mbl" 'magit-blame-locate-commit)
      (nmap " mdd" 'ediff-current-file-on-git)
      (nmap " mdm" 'ediff-current-file-on-git)
      (nmap " mD" (bind (call-interactively 'magit-diff)
                        (switch-to-buffer "*magit-diff*")
                        (delete-other-windows)))
      (nmap " mv" 'magit-checkout)
      (nmap " mV" 'magit-branch-manager)
      (nmap " ms" 'magit-status)
      (nmap " ml" 'magit-log-current-file)
      (nmap " mA" 'magit-log)
      (nmap " mc" 'magit-commit)
      (nmap " mO" 'magit-oops)
      (nmap " mL" (bind (magit-show-commit-backward) (switch-to-buffer-other-window "*magit-commit*")))
      (nmap " mr" 'magit-rebase-step)
      (nmap " mR" 'magit-interactive-rebase)
      (nmap " mf" (bind (magit-git-command "fetch --all")))
      (nmap " mF" (bind (magit-git-command "pull --rebase")))
      (nmap " PF" (bind (project-explorer-open)
                        (switch-to-buffer-other-window "*project-explorer*") ))

      (setq git-messenger:show-detail t)

      (defun magit-review ()
         (interactive)
         (magit-diff "master")
         (switch-to-buffer "*magit-diff*")
         (delete-other-windows))

      (require 'helm-open-github)

      (defun yank-github-url-for-region ()
        "copies url of current selected region into clipboard (for easy sharing in IM)
        depends on helm-open-github)"
        (interactive)
        (if (not mark-active)
          (print "no region selected")
          (let* ((file (buffer-file-name))
                (start (region-beginning))
                (end (region-end))
                (root (helm-open-github--root-directory))
                (repo-path (file-relative-name file root))
                (start-line (line-number-at-pos start))
                (end-line (line-number-at-pos end)))
            (kill-new (-get-github-url-for-file-region repo-path start-line end-line)))))

      (defun -get-github-url-for-file-region (file &optional start end)
        (let ((host (helm-open-github--host))
              (remote-url (helm-open-github--remote-url))
              (branch (helm-open-github--branch))
              (marker (helm-open-github--highlight-marker start end)))
          (helm-open-github--file-url host remote-url branch file marker)))

     ;; magit
     (evil-add-hjkl-bindings magit-branch-manager-mode-map 'emacs
       "K" 'magit-discard-item
       "L" 'magit-key-mode-popup-logging)

     (evil-add-hjkl-bindings magit-status-mode-map 'emacs
       "K" 'magit-discard-item
       "l" 'magit-key-mode-popup-logging
       "t" 'magit-toggle-file-section
       ":" 'smex
       "w" 'evil-forward-WORD-begin
       "W" 'magit-wazzup
       "J" 'open-jira-ticket-from-point
       "h" 'magit-toggle-diff-refine-hunk)

     (evil-add-hjkl-bindings magit-branch-manager-mode-map 'emacs
       "w" 'evil-forward-WORD-begin
       "J" 'open-jira-ticket-from-point
       "W" 'magit-wazzup)

     (evil-add-hjkl-bindings magit-commit-mode-map 'emacs
       "t" 'magit-toggle-file-section
       ":" 'smex
       "w" 'evil-forward-WORD-begin
       "W" 'magit-wazzup
       "J" 'open-jira-ticket-from-point
       "h" 'magit-toggle-diff-refine-hunk)

     (evil-add-hjkl-bindings magit-log-mode-map 'emacs
       "t" 'magit-toggle-file-section
       ":" 'smex
       "w" 'evil-forward-WORD-begin
       "W" 'magit-wazzup
       "J" 'open-jira-ticket-from-point
       "h" 'magit-toggle-diff-refine-hunk)

     (defun ediff-current-file-on-git ()
       (interactive)
       (ediff-revision (buffer-file-name (current-buffer))))

     (add-hook 'magit-log-edit-mode-hook
               (lambda () (flyspell-mode t)))

      (defun git-write-file ()
        (interactive)
        (magit-stage-item (buffer-file-name (current-buffer))))

    (defalias 'conflicts-keep-current 'smerge-keep-current)
    (defalias 'conflicts-keep-first 'smerge-keep-mine)
    (defalias 'conflicts-keep-second 'smerge-keep-other)

    (require 'smerge-mode)
    ; (define-key smerge-mode-map (kbd "<C-return>") 'conflicts-keep-current)
    ; (define-key smerge-mode-map (kbd "<f8>") 'smerge-prev)
    ; (define-key smerge-mode-map (kbd "<f9>") 'smerge-next)

    (setq magit-completing-read-function 'magit-ido-completing-read)
    (setq magit-default-tracking-name-function 'magit-default-tracking-name-branch-only)

    (defun show-commit-at-point ()
      (interactive)
      (let* ((file (buffer-file-name))
             (line (line-number-at-pos))
             (commit-info (git-messenger:commit-info-at-line file line))
             (commit-id (car commit-info)))
        (magit-show-commit commit-id)
        (switch-to-buffer-other-window "*magit-commit*")))

    (nmap " mkl" 'show-commit-at-point)

    (defun git-purr ()
      (interactive)
      (magit-shell-command "git pull --rebase"))

    (defun 10to8-git-flow-command (flow-command ticket-number)
      (let* ((branch-suffix (concat "TTE-" ticket-number))
            (flow-prefix "flow")
            (complete-command (concat flow-prefix
                                      " "
                                      flow-command
                                      " "
                                      branch-suffix)))
        (magit-git-command complete-command)))


    ; options: fetch from origin, and keep branch
    ; cf https://github.com/nvie/gitflow/wiki/Command-Line-Arguments

    (defun 10to8-flow-start-feature (ticket-number)
      (interactive "MTicket number: ")
      (10to8-git-flow-command "feature start"
                              ticket-number))

    (defun 10to8-flow-finish-feature (ticket-number)
      (interactive "MTicket number: ")
      (10to8-git-flow-command "feature finish -k"
                              ticket-number))

    (defun 10to8-flow-start-hotfix (ticket-number)
      (interactive "MTicket number: ")
      (10to8-git-flow-command "hotfix start"
                              ticket-number))

    (defun 10to8-flow-finish-hotfix (ticket-number)
      (interactive "MTicket number: ")
      (10to8-git-flow-command "hotfix finish -k"
                              ticket-number))

    (defun 10to8-flow-publish-feature (ticket-number)
      (interactive "MTicket number: ")
      (10to8-git-flow-command "feature publish"
                              ticket-number))

    (defun shell-command-as-string (cmd)
      (with-temp-buffer
        (shell-command-on-region (point-min) (point-max)
                                 cmd t)
        (buffer-string)))

    (defun extract-jira-ticket-ref (branch-ref)
      "takes the part after feature/ or hotfix/,
       if applicable"
      (if (s-contains? "/" branch-ref)
        (let* ((second-part (cadr (split-string branch-ref "/")))
              (trimmed-ref (replace-regexp-in-string "\n$" "" second-part)))
          trimmed-ref)
          nil))

    (defun get-current-ticket-name ()
      (let* ((branch-ref (shell-command-as-string "git rev-parse --abbrev-ref HEAD"))
             (ticket-name (extract-jira-ticket-ref branch-ref)))
        ticket-name))

    (defun open-jira-ticket (ticket-ref)
      (if (not (eq nil ticket-ref))
            (browse-url (concat "https://tento8.atlassian.net/browse/" ticket-ref))))

    (defun open-jira-ticket-from-current-branch ()
      (interactive)
      (let* ((ticket-name (get-current-ticket-name)))
        (open-jira-ticket ticket-name)))

    (defun open-jira-ticket-from-point ()
      (interactive)
      (let* ((at-point (substring-no-properties (thing-at-point 'symbol)))
             (ticket-name (extract-jira-ticket-ref at-point)))
        (message at-point)
        (open-jira-ticket ticket-name)))

  (defun magit-oops ()
    (interactive)
    (save-window-excursion
      (magit-with-refresh
        (shell-command "git --no-pager commit --amend --reuse-message=HEAD"))))

  (eval-after-load "magit"
    (lambda ()
      (define-key magit-status-mode-map (kbd "C-c C-a") 'magit-just-amend)
      (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)))

  ;; full screen magit-status

  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp :tangle "init-projectile.el"

  (require 'project-explorer)
  (setq pe/omit-regex "^\\.\\|^#\\|~$|\\.pyc$")
  (setq pe/width 30)

  (require 'projectile)
  (require 'grizzl)

  (projectile-global-mode)

  (define-key projectile-mode-map [?\s-j] 'projectile-switch-project)
  (define-key projectile-mode-map [?\s-d] 'projectile-find-dir)
  (define-key projectile-mode-map [?\s-a] 'projectile-ack)
  (define-key projectile-mode-map [?\s-p] 'projectile-find-file)
  (define-key projectile-mode-map [?\s-b] 'projectile-switch-to-buffer)
  ; (global-set-key (kbd "s-p") 'projectile-find-file)
  ; (global-set-key (kbd "s-b") 'projectile-switch-to-buffer)
  (define-key projectile-mode-map [?\s-t] 'helm-etags-select)

  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'grizzl)
  ; broken because of font-family, apparently

  ;; Press Command-b for fuzzy switch buffer

  (add-to-list 'ack-and-a-half-project-root-file-patterns ".projectile\\'")

  (defcustom projectile-switch-project-action 'helm-projectile
    ""
    :group 'projectile
    :type 'symbol)

  ; (setq projectile-require-project-root nil)
  (setq projectile-enable-caching t)

  (global-set-key (kbd "C-x f") 'helm-projectile)

#+end_src

* Pandoc
#+begin_src emacs-lisp :tangle "init-pandoc.el"
;  (load "pandoc-mode")
;  (add-hook 'markdown-mode-hook 'turn-on-pandoc)
;  (add-hook 'TeX-mode-hook 'turn-on-pandoc)
;  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
#+end_src
* Org-mode
#+begin_src emacs-lisp :tangle "init-org.el"

(define-minor-mode evil-org-mode
  "Buffer local minor mode for evil-org"
  :init-value nil
  :lighter " EvilOrg"
  :keymap (make-sparse-keymap) ; defines evil-org-mode-map
  :group 'evil-org)

(add-hook 'org-mode-hook 'evil-org-mode) ;; only load with org-mode

(defun evil-org-new-line ()
  (interactive)
  (org-end-of-line)
  (org-return)
  (evil-insert 1))

(defun evil-org-insert-todo-heading ()
  (interactive)
  (org-end-of-line)
  (org-insert-todo-heading nil)
  (evil-insert 1))

;; regular normal state shortcuts.
(evil-define-key 'normal evil-org-mode-map
  "gh" 'outline-up-heading
  "gj" 'org-forward-same-level
  "gk" 'org-backward-same-level
  "gl" 'outline-next-visible-heading
  "H" 'org-beginning-of-line
  "L" 'org-end-of-line
  "t" 'org-todo
  "T" 'evil-org-insert-todo-heading
  "$" 'org-end-of-line
  "^" 'org-beginning-of-line
  "-" 'org-ctrl-c-minus
  "<" 'org-metaleft
  ">" 'org-metaright
  "o" 'evil-org-new-line)


;; normal & insert state shortcuts.
(mapcar (lambda (state)
          (evil-define-key state evil-org-mode-map
            (kbd "M-l") 'org-metaright
            (kbd "M-h") 'org-metaleft
            (kbd "M-k") 'org-metaup
            (kbd "M-j") 'org-metadown
            (kbd "M-L") 'org-shiftmetaright
            (kbd "M-H") 'org-shiftmetaleft
            (kbd "M-K") 'org-shiftmetaup
            (kbd "M-J") 'org-shiftmetadown)) '(normal insert))

  (setq org-edit-src-content-indentation 0
        org-src-tab-acts-natively t
        org-src-fontify-natively t
        org-confirm-babel-evaluate nil)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (clojure . t)))

  (setq org-default-notes-file "~/Inbox/notes.org")

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda ()
    (org-bullets-mode 1)
    (turn-on-font-lock)
    ; (define-key evil-normal-state-map " o" 'helm-org-headlines)
  ))

  ; When in an org-mode buffer, bind TeX-insert-quote to =C-c "=. Turned off by default.

  ; (add-hook 'org-mode-hook 'smart-quote-keys)

  ; (defun smart-quote-keys ()
  ;   (require 'typopunct)
  ;   (typopunct-change-language 'english)
  ;   (local-set-key (kbd "C-c \'") 'typopunct-insert-single-quotation-mark)
  ;   (local-set-key (kbd "C-c \"") 'typopunct-insert-quotation-mark)
  ;   )


 ; Configure org-mode so that when you edit source code in an indirect buffer (with C-c '), the buffer is opened in the current window. That way, your window organization isn't broken when switching.

  (setq org-src-window-setup 'current-window)
#+end_src

* Files
#+BEGIN_SRC emacs-lisp :tangle "init-files.el"

  ;; let command be meta too
  (setq mac-command-modifier 'meta)

  ;; follow symlinks and don't ask questions
  (setq vc-follow-symlinks t)

  (setq confirm-nonexistent-file-or-buffer nil)
  (setq auto-save-interval 10)

  (require 'helm-ls-git)

  ; Make sure buffers update when files change
  (global-auto-revert-mode)

  (defun save-all ()
    (interactive)
    (save-some-buffers t))

  (add-hook 'focus-out-hook 'save-all)
  (define-key evil-normal-state-map " w" 'save-all)


    (setq confirm-nonexistent-file-or-buffer nil)
    (setq ido-create-new-buffer 'always)

    ;; sort ido filelist by mtime instead of alphabetically
    (defun ido-sort-mtime ()
      (setq ido-temp-list
            (sort ido-temp-list
                  (lambda (a b)
                    (time-less-p
                     (sixth (file-attributes (concat ido-current-directory b)))
                     (sixth (file-attributes (concat ido-current-directory a)))))))
      (ido-to-end  ;; move . files to end (again)
       (delq nil (mapcar
                  (lambda (x) (and (char-equal (string-to-char x) ?.) x))
                  ido-temp-list))))
    (add-hook 'ido-make-file-list-hook 'ido-sort-mtime)
    (add-hook 'ido-make-dir-list-hook 'ido-sort-mtime)

  (defun my-rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))

  (nmap " rn" 'my-rename-current-buffer-file)

  (defun my-delete-current-buffer-file ()
    "Removes file connected to current buffer and kills buffer."
    (interactive)
    (let ((filename (buffer-file-name))
          (buffer (current-buffer))
          (name (buffer-name)))
      (if (not (and filename (file-exists-p filename)))
          (ido-kill-buffer)
        (when (yes-or-no-p "Are you sure you want to remove this file? ")
          (delete-file filename)
          (kill-buffer buffer)
          (message "File '%s' successfully removed" filename)))))

  (nmap " RM" 'my-delete-current-buffer-file)

  (defun copy-yank-str (msg)
    (kill-new msg)
    (with-temp-buffer
      (insert msg)
      (shell-command-on-region (point-min) (point-max)
                               (cond
                                ((eq system-type 'cygwin) "putclip")
                                ((eq system-type 'darwin) "pbcopy")
                                ))))

  (defun copy-filename-of-current-buffer ()
    "copy file name (NOT full path) into the yank ring and OS clipboard"
    (interactive)
    (let ((filename))
      (when buffer-file-name
        (setq filename (file-name-nondirectory buffer-file-name))
        (kill-new filename)
        (copy-yank-str filename)
        (message "filename %s => clipboard & yank ring" filename)
        )))

  (defun copy-full-path-of-current-buffer ()
    "copy full path into the yank ring and OS clipboard"
    (interactive)
    (when buffer-file-name
      (kill-new (file-truename buffer-file-name))
      (copy-yank-str (file-truename buffer-file-name))
      (message "full path of current buffer => clipboard & yank ring")
      ))

  (global-set-key (kbd "C-x y f") 'copy-full-path-of-current-buffer)

  (defun sudo-edit (&optional arg)
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

; Save Place in Opened Files
  (setq-default save-place t)
  (setq save-place-file (concat user-emacs-directory "saved-places"))
  (require 'saveplace)

(defun create-new-buffer ()
  "Create a new buffer named *new*[num]."
  (interactive)
  (switch-to-buffer-other-window (generate-new-buffer-name "*new*"))
  (lisp-interaction-mode))

;; Create a new instance of emacs
(when window-system
  (defun new-emacs-instance ()
    (interactive)
    (let ((path-to-emacs
           (locate-file invocation-name
                        (list invocation-directory) exec-suffixes)))
      (call-process path-to-emacs nil 0 nil))))

(global-set-key (kbd "C-c n") 'create-new-buffer)
(global-set-key (kbd "C-c C-n") (bind (create-new-buffer) (delete-other-windows)))
(global-set-key (kbd "C-c N") 'new-emacs-instance)


      (require 'f)

      (defun find-file-relative-to-current (&optional relative-index cycle)
        "switches buffer to a nearby file
         arguments:
         - relative-index: signed integer (default 1) which specifies the step relative to current file
         - cycle: boolean (default true), specifies whether to jump to other edge when reaching end of dir
           FIXME
          -- requires dash.el and f.el"
        (let* ((current-dir (file-name-directory (or load-file-name buffer-file-name)))
               (dir-contents (directory-files current-dir))
               (dir-files (-filter 'f-file? dir-contents))
               (current-file  (file-name-nondirectory (buffer-file-name)))
               (index-current-file (-elem-index current-file dir-files))
               (dir-files-length (length dir-files))
               (target-index (incf index-current-file (or relative-index 1)))
               (cycle (if (boundp 'cycle) cycle t))
               (index (cond
                        ((and cycle (>= target-index dir-files-length)) 0)
                        ((and cycle (< target-index 0)) (decf dir-files-length))
                        (t target-index)))
               (nextfile (nth index dir-files)))
          (find-file nextfile)))

      (defun next-file-in-dir ()
        "like in vim-unimpaired."
        (interactive) (find-file-relative-to-current 1))

      (defun previous-file-in-dir ()
        "like in vim-unimpaired."
        (interactive) (find-file-relative-to-current -1))

      (nmap (kbd "] f") 'next-file-in-dir)
      (nmap (kbd "[ f") 'previous-file-in-dir)

(defun edit-emacs-config ()
 (interactive)
 (find-file-other-window "~/.emacs.d/admin.org")
 (delete-other-windows))

(global-set-key (kbd "C-h C-c") 'edit-emacs-config)


;Stop creating backup~ and #auto-save# files

(setq make-backup-files nil)
(setq auto-save-default nil)

#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp :tangle "init-dired.el"

; Auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

    (put 'dired-find-alternate-file 'disabled nil)

   (add-hook 'dired-mode-hook (lambda ()
     (define-key dired-mode-map "h" 'dired-up-directory)
     (define-key dired-mode-map "l" 'diredp-find-file-reuse-dir-buffer)
     (define-key dired-mode-map "/" 'dired-isearch-filenames)
     (define-key dired-mode-map "j" 'diredp-next-line)
     (define-key dired-mode-map "~" (bind (dired "~")))
     (define-key dired-mode-map "k" 'diredp-previous-line)
     (define-key dired-mode-map "K" 'dired-do-delete)
     (define-key dired-mode-map "R" 'dired-efap)
     (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
     (define-key dired-mode-map ":" 'smex)
     (define-key dired-mode-map "G" 'end-of-buffer)
     (define-key dired-mode-map "." 'dired-dotfiles-toggle)
     (define-key dired-mode-map "g" 'beginning-of-buffer)
     (define-key dired-mode-map "Q" 'quit-window)))

  (defun dired-dotfiles-toggle ()
    "Show/hide dot-files"
    (interactive)
    (when (equal major-mode 'dired-mode)
      (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
    (progn
      (set (make-local-variable 'dired-dotfiles-show-p) nil)
      (message "h")
      (dired-mark-files-regexp "^\\\.")
      (dired-do-kill-lines))
  (progn (revert-buffer) ; otherwise just revert to re-show
         (set (make-local-variable 'dired-dotfiles-show-p) t)))))

  (require 'find-dired)
  (setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))

  (nmap " I" (lambda () (interactive) (dired "~/Inbox/")))

  (require 'wdired)
  (require 'dired+)
  (require 'dired-details)
  (require 'dired-efap)

  (load "dired-x")

  (toggle-diredp-find-file-reuse-dir 1)

  ;; Make dired less verbose
  (setq-default dired-details-hidden-string "")
  (dired-details-install)


  (add-hook 'dired-after-readin-hook 'dired-file-name-filter-handler)

  (setq font-lock-maximum-decoration nil)

  (defvar dired-file-name-filter nil
    "*File name filter. Only files with name matching the regexp dired-file-name-filter are shown in the dired buffer.")

  (make-variable-buffer-local 'dired-file-name-filter)

  (defvar dired-filter-name-marker 16)

  (defun dired-file-name-filter (filter)
    "Set variable `dired-file-name-filter' to filter."
    (interactive "sFile name filter regexp (or empty string for no filter):")
    (setq dired-file-name-filter (if (= (length filter) 0) nil filter))
    (dired-revert))

  (define-key dired-mode-map [menu-bar regexp filter] '(menu-item "Filter" dired-file-name-filter :help "Set file name filter."))

  (define-key dired-mode-map (kbd "% f") 'dired-file-name-filter)

  (defun dired-file-name-filter-handler ()
    "To be hooked into `dired-after-readin-hook'."
    (when dired-file-name-filter
      (goto-char (point-min))
      (insert "Dired Filter Name Filter:" dired-file-name-filter)
      (let ((dired-marker-char dired-filter-name-marker))
        (dired-map-dired-file-lines
         '(lambda (name)
      (unless (string-match dired-file-name-filter name)
        (dired-mark 1)
        )))
        (dired-do-kill-lines nil (concat "Filter" dired-file-name-filter " omitted %d line%s")))))

(defun diredext-exec-git-command-in-shell (command &optional arg file-list)
  "Run a shell command `git COMMAND`' on the marked files.
if no files marked, always operate on current line in dired-mode
"
  (interactive
   (let ((files (dired-get-marked-files t current-prefix-arg)))
     (list
      ;; Want to give feedback whether this file or marked files are used:
      (dired-read-shell-command "git command on %s: " current-prefix-arg files)
      current-prefix-arg
      files)))
  (unless (string-match "[*?][ \t]*\\'" command)
    (setq command (concat command " *")))
  (setq command (concat "git " command))
  (dired-do-shell-command command arg file-list)
  (message command))

(setq dired-details-initially-hide t)

(eval-after-load 'dired
  '(progn
     (setq-default dired-details-hidden-string "")
     (define-key dired-mode-map "(" 'dired-details-toggle)
     (define-key dired-mode-map ")" 'dired-details-toggle)
     (define-key dired-mode-map "/" 'diredext-exec-git-command-in-shell)

     (require 'dired+)
     (setq dired-recursive-deletes 'top)
     ))

#+END_SRC

* Processes
#+BEGIN_SRC emacs-lisp :tangle "init-processes.el"

  (require 'server)
  (unless (server-running-p) (server-start))

    ; don't ask about killing processes attached to buffers
    (setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
             kill-buffer-query-functions))

    (add-hook 'ack-mode-hook
             (lambda ()
             (set-process-query-on-exit-flag (get-buffer-process
                                             (current-buffer))
                                             nil)))

    (add-hook 'comint-exec-hook
             (lambda ()
             (set-process-query-on-exit-flag (get-buffer-process
                                             (current-buffer))
                                             nil)))


  (require 'prodigy)

  (defun delete-process-at-point ()
    (interactive)
    (let ((process (get-text-property (point) 'tabulated-list-id)))
      (cond ((and process
                  (processp process))
             (delete-process process)
             (revert-buffer))
            (t
             (error "no process at point!")))))


  (nmap " PL" (bind (list-processes)
                        (switch-to-buffer-other-window "*Process List*")))

  (nmap " Pp" 'prodigy)
  (nmap " PP" 'list-processes)

  (define-key process-menu-mode-map (kbd "K") 'delete-process-at-point)

#+END_SRC
* Terminal
#+BEGIN_SRC emacs-lisp :tangle "init-terminal.el"

;;make sure ansi colour character escapes are honoured
(require 'ansi-color)

(ansi-color-for-comint-mode-on)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

(after 'comint
  (define-key comint-mode-map [up] 'comint-previous-input)
  (define-key comint-mode-map [down] 'comint-next-input))

;; kill buffer when terminal process is killed
; (defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
;   (if (memq (process-status proc) '(signal exit))
;       (let ((buffer (process-buffer proc)))
;         ad-do-it
;         (kill-buffer buffer))
;     ad-do-it))
; (ad-activate 'term-sentinel)

(setq multi-term-program "/bin/zsh")

;export PROMPT_COMMAND="";

;; utf8
(defun my-term-use-utf8 ()
  (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(add-hook 'term-exec-hook 'my-term-use-utf8)

; don't replace region/buffer with term error message
(setq shell-command-default-error-buffer t)


(defcustom term-unbind-key-list
  '("C-z" "C-x" "C-c" "C-h" "C-y" "<ESC>")
  "The key list that will need to be unbind."
  :type 'list
  :group 'multi-term)

(defcustom term-bind-key-alist
  '(
    ("C-c C-c" . term-interrupt-subjob)
    ("C-p" . previous-line)
    ("C-n" . next-line)
    ("C-m" . term-send-raw)
    ("C-t" . term-send-raw)
    ("M-f" . term-send-forward-word)
    ("M-b" . term-send-backward-word)
    ("M-o" . term-send-backspace)
    ("M-p" . term-send-up)
    ("M-n" . term-send-down)
    ("M-M" . term-send-forward-kill-word)
    ("M-N" . term-send-backward-kill-word)
    ("M-s" . isearch-forward)
    ("M-r" . isearch-backward)
    ("C-r" . term-send-reverse-search-history)
    ("M-," . term-send-input)
    ("C-c C-j" . term-line-mode)
    ("C-c C-k" . term-char-mode)
    ("M-." . comint-dynamic-complete))
  "The key alist that will need to be bind.
If you do not like default setup, modify it, with (KEY . COMMAND) format."
  :type 'alist
  :group 'multi-term)

  (nmap (kbd "[ t") 'multi-term-next)
  (nmap (kbd "] t") 'multi-term-prev)

  (add-hook 'term-mode-hook 'auto-complete-mode)

#+END_SRC

 to try:
- abbrev mode

* 10to8
#+BEGIN_SRC emacs-lisp :tangle "init-10to8.el"


        ; (defcustom virtualenv-workon-starts-python nil
        ;   "If non-nil the `virtualenv-workon' will also start python."
        ;   :group 'virtualenv
        ;   :type 'boolean)

        (require 'virtualenvwrapper)
        (venv-initialize-interactive-shells)
        (venv-initialize-eshell)
        (setq venv-location "~/.virtualenvs/")

        (defun start-10to8 ()
          (interactive)
          (venv-workon "Native")
          (setq python-django-project-root "~/10to8/Native/native/src/")
          (python-django-open-project "~/10to8/Native/native/src/core" "core.settings"))

        (defun open-10to8-db ()
          (interactive)
          (cd "/usr/local/var/postgres/pg_log/")
          (ido-find-file-read-only)
          (auto-revert-tail-mode))

      (defun run-django-command (django-cmd &optional cmd-args)
        (let ((project-buffer-name "*Django: core (core.settings)*"))
          (start-10to8)
          (switch-to-buffer-other-window project-buffer-name)
          (if cmd-args
            (funcall django-cmd cmd-args)
            (funcall django-cmd))))

      (defun 10to8-runserver ()
        (interactive)
        (let ((server-settings     "localhost:8000")
              (server-buffer-name  "*[Django: core (core.settings)] ./manage.py runserver localhost:8000*"))
          (if (get-buffer server-buffer-name)
            (switch-to-buffer-other-window server-buffer-name)
            (progn (run-django-command 'python-django-qmgmt-runserver server-settings)
                   (switch-to-buffer-other-window server-buffer-name)))))

      (defun 10to8-shell ()
        (interactive)
        (let ((shell-buffer-name  "*[Django: core (core.settings)] ./manage.py shell*"))
          (if (get-buffer shell-buffer-name)
            (switch-to-buffer-other-window shell-buffer-name)
            (progn
              (run-django-command 'python-django-qmgmt-shell)
              (switch-to-buffer-other-window shell-buffer-name)))))

      (defun send-to-10to8-shell (string)
        (interactive)
        (let* ((shell-buffer-name  "*[Django: core (core.settings)] ./manage.py shell*")
               (shell-process (get-buffer-process shell-buffer-name)))
          (comint-send-string shell-process string)
          (when (or (not (string-match "\n$" string))
                    (string-match "\n[ \t].*\n?$" string))
            (comint-send-string shell-process "\n"))))

    ; (require 's)

    ; (defun send-region-to-10to8-shell (start end)
    ;   (interactive "r")
    ;   (let* ((string (buffer-substring start end)))
    ;     (with-temp-buffer
    ;       (insert string)
    ;       (send-to-10to8-shell (buffer-substring-no-properties (buffer-string))))))


       (defun search-deep-thought (string)
        (interactive (list
           (read-from-minibuffer "Search: " (ag/dwim-at-point))))
        (ag/search string "~/10to8/Native/native/src/core" t))

       (defun search-jeltz (string)
        (interactive (list
           (read-from-minibuffer "Search: " (ag/dwim-at-point))))
        (ag/search string "~/10to8/Native/native/src/apps/jeltz/app" t))

       (defun search-colin (string)
        (interactive (list
           (read-from-minibuffer "Search: " (ag/dwim-at-point))))
        (ag/search string "~/10to8/Native/native/src/apps/colin/app" t))

       (require 'nose)
       (add-to-list 'nose-project-root-files ".project")

      (defun nose-in-shell ()
        "runs test in eshell"
        (interactive)
        (let ((pmt-command "cd ~/10to8/Native/native/src && python manage.py test")
             (pmt-options "--noinput"))
          (switch-to-buffer-other-window "*eshell*")
          (append-to-buffer "*eshell*" (format "%s %s %s:%s" pmt-command pmt-options buffer-file-name (nose-py-testable)))))

          ; (eshell-command (format "%s %s %s:%s" pmt-command pmt-options buffer-file-name (nose-py-testable)))

      (defun yank-current-nose-test-path ()
        "runs test in eshell"
        (interactive)
        (let ((pmt-command "python manage.py test")
             (pmt-options "--noinput"))
          (kill-new (format "%s %s %s:%s" pmt-command pmt-options buffer-file-name (nose-py-testable)))))

      (global-set-key (kbd "C-c k k") 'search-deep-thought)

      (global-set-key (kbd "C-c j m") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/jeltz/app/models/")))
      (global-set-key (kbd "C-c j v") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/jeltz/app/views/")))
      (global-set-key (kbd "C-c j c") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/jeltz/app/controllers/")))
      (global-set-key (kbd "C-c j M") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/jeltz/app/modules/")))
      (global-set-key (kbd "C-c j t") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/jeltz/app/templates/")))
      (global-set-key (kbd "C-c j s") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/jeltz/app/styles/")))
      (global-set-key (kbd "C-c j a") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/jeltz/app/")))
      (global-set-key (kbd "C-c j j") 'search-jeltz)
      (global-set-key (kbd "C-x j") (bind (cd "~/10to8/Native/native/src/apps/jeltz/app/")))

      (global-set-key (kbd "C-c c m") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/colin/app/models/")))
      (global-set-key (kbd "C-c c v") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/colin/app/views/")))
      (global-set-key (kbd "C-c c C") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/colin/app/controllers/")))
      (global-set-key (kbd "C-c c M") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/colin/app/modules/")))
      (global-set-key (kbd "C-c c t") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/colin/app/templates/")))
      (global-set-key (kbd "C-c c s") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/colin/app/styles/")))
      (global-set-key (kbd "C-c c a") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/apps/colin/app/")))
      (global-set-key (kbd "C-c c c") 'search-colin)
      (global-set-key (kbd "C-x c") (bind (cd "~/10to8/Native/native/src/apps/colin/app")))

      (global-set-key (kbd "C-x x") (bind (cd "~/10to8/Native/native/src/core")))
      (global-set-key (kbd "C-c k a") (bind (ido-find-file-in-dir "~/10to8/Native/native/src/core/")))
      (global-set-key (kbd "C-c 1") (bind (ido-find-file-in-dir "~/10to8/")))
      (global-set-key (kbd "C-c i") (bind (ido-find-file-in-dir "~/Inbox/")))

  (prodigy-define-service
    :name "10to8-sockjs"
    :command "/usr/local/bin/python manage.py run_sockjs_server"
    :cwd "~/10to8/Native/native/src/"
    :tags '(10to8)
    :path '("~/.virtualenvs/Native/bin/" "/usr/local/bin/" "~/10to8/Native/native/src/")
    :init (lambda () (venv-workon "Native")))

  (prodigy-define-service
    :name "10to8-messaging"
    :command "source ~/.virtualenvs/Native/bin/activate && python manage.py run_messaging"
    :cwd "~/10to8/Native/native/src/"
    :path '("~/.virtualenvs/Native/bin/" "/usr/local/bin/" "~/10to8/Native/native/src/")
    :tags '(10to8))

  (prodigy-define-service
    :name "10to8-rabbitmq"
    :command ". ~/.virtualenvs/Native/bin/activate && rabbitmq-server"
    :cwd "~/10to8/Native/native/src/"
    :tags '(10to8))

  (prodigy-define-service
    :name "10to8-celery"
    :command ". ~/.virtualenvs/Native/bin/activate && python manage.py celery worker -E -l info"
    :cwd "~/10to8/Native/native/src/"
    :tags '(10to8))

  (prodigy-define-service
    :name "brunch jeltz"
    :command "/usr/local/bin/brunch watch --server -p 3333"
    :cwd "~/10to8/Native/native/src/apps/jeltz"
    :tags '(10to8))

  (prodigy-define-service
    :name "brunch colin"
    :command "/usr/local/bin/brunch watch --server -p 3334"
    :cwd "~/10to8/Native/native/src/apps/colin"
    :tags '(10to8))

; (require 'butler)

; (add-to-list butler-server-list
;              '(jenkins "10to8"
;                        (server-address . "https://jenkins.10to8.com/")
;                        (auth-file . "~/.authinfo")))

#+END_SRC
* Coffeescript
#+BEGIN_SRC emacs-lisp :tangle "init-coffee.el"

  (defun coffee-custom ()
   "coffee-mode-hook"
   (set (make-local-variable 'tab-width) 2)
   (auto-complete-mode)
   ; (coffeelintnode-hook)
   (require 'flymake-coffee)
   (flymake-coffee-load)
   (unless (eq buffer-file-name nil) (flymake-mode 1)) ;dont invoke flymake on temporary buffers for the interpreter
  )

   (add-hook 'coffee-mode-hook
     (lambda() (coffee-custom)))

    (defun coffee-open-below ()
      (interactive)
      (if (eq major-mode 'coffee-mode)
        (progn (evil-append-line 1)
            (coffee-newline-and-indent))
        (evil-open-below 1)))

    ; (defun coffee-open-above ()
    ;   (interactive)
    ;   (if (eq major-mode 'coffee-mode)
    ;     (progn (evil-previous-visual-line)
    ;         (coffee-open-below))
    ;     (evil-open-above 1)))


   (define-key evil-normal-state-map "o" 'coffee-open-below)


   (setq coffeelintnode-node-program "/usr/local/bin/coffeelint")
   (setq coffeelintnode-coffeelint-excludes (list 'max_line_length))
   (setq coffeelintnode-coffeelint-includes '())
   (setq coffeelintnode-coffeelint-set "")

  ;; Start the server when we first open a coffee file and start checking
  (setq coffeelintnode-autostart 'true)

#+END_SRC

* JSON
#+BEGIN_SRC emacs-lisp :tangle "init-json.el"

(defun format-json ()
  (interactive)
  (let ((cmd "python -mjson.tool"))
    (shell-command-on-region (region-beginning) (region-end) cmd nil t)))

#+END_SRC
* Angular
#+BEGIN_SRC emacs-lisp :tangle "init-angular.el"

(defun highlight-angular-anchor ()
  (interactive)
  (highlight-regexp "ng-\w*=" 'hi-red))

#+END_SRC
* Popwin
#+BEGIN_SRC emacs-lisp :tangle "init-popwin.el"

(require 'popwin)
(setq display-buffer-function 'popwin:display-buffer)

(setq popwin:special-display-config
      '(("*Help*"  :height 20)
        ("*Completions*" :noselect t :height 12)
        ("*Ido Completions*" :noselect t :height 12)
        ("*Messages*" :height 20)
        ("*Apropos*" :noselect t :height 30)
        ("*compilation*" :noselect t)
        ("*Backtrace*" :height 30)
        ("*Messages*" :height 30)
        ("*ag*" :noselect t :height 14)
        ("*Occur*" :height 14)
        ("*Python Doc*" :height 10)
        ("\\*ansi-term\\*.*" :regexp t :height 30)
        ("*shell*" :height 30)
        ("*gists*" :height 30)
        ("*sldb.*":regexp t :height 30)
        ("*nrepl-error*" :height 30 :stick t)
        ("*nrepl-doc*" :height 15 :stick t)
        ("*nrepl-src*" :height 30 :stick t)
        ("*nrepl-result*" :height 15 :stick t)
        ("*cider-result*" :height 15 :stick t)
        ("*cider-doc*" :height 15 :stick t)
        ("*nrepl-macroexpansion*" :height 30 :stick t)
        ("*Kill Ring*" :height 30)
        ("*helm lsgit*" :height 10)
        ("*helm mini*" :height 12)
        ("*helm bookmarks*" :height 12)
        ("*helm kill ring*" :height 8)
        ("*Helm Find Files*" :height 12)
        ("*Compile-Log*" :height 30 :stick t)
        ("*HTTP Response*" :height 20 :stick t)
        ("*[Django: core (core.settings)] ./manage.py shell*" :height 30 :stick t)
        ("*Django: core (core.settings)" :height 20 :stick t)
        ("*git-gutter+-diff*" :height 10 :stick t)))

#+END_SRC

* Pomodoro
#+BEGIN_SRC emacs-lisp :tangle "init-pomodoro.el"

  (require 'pomodoro)
  ;(pomodoro-add-to-mode-line)

#+END_SRC

* Registers

#+BEGIN_SRC emacs-lisp :tangle "init-registers.el"

;; @see http://www.emacswiki.org/emacs/BetterRegisters
;; This is used in the function below to make marked points visible
(defface register-marker-face '((t (:background "grey")))
      "Used to mark register positions in a buffer."
      :group 'faces)

#+END_SRC

* Javascript
#+BEGIN_SRC emacs-lisp :tangle "init-javascript.el"

  (defun skewer-coffee-eval (coffee-code)
    "Requests the browser to evaluate a coffeescipt string."
    ;; XXX should escape double quote characters
    (skewer-eval (concat "CoffeeScript.eval(\""
                         (s-replace "\n" "\\n" (s-trim coffee-code))
                         "\");")
                 #'skewer-post-minibuffer))

  (defun skewer-coffee-eval-region ()
    "Sends the coffeescript code the region encloses, or -- if
  there's no active region -- sends the current line."
    (interactive)
    (skewer-coffee-eval
     (if (region-active-p)
         (buffer-substring-no-properties (region-beginning) (region-end))
         (thing-at-point 'line))))

  (defun skewer-coffee-eval-defun ()
    "Evaluates the current 'sentence', which is usually a complete function."
    (interactive)
    (skewer-coffee-eval (thing-at-point 'sentence)))

  (defun skewer-coffee-eval-buffer ()
    "Evaluates the current buffer as CoffeeScript."
    (interactive)
    (skewer-coffee-eval (buffer-substring-no-properties (point-min) (point-max))))

  (defvar skewer-coffee-mode-map
    (let ((map (make-sparse-keymap)))
      (prog1 map
        (define-key map (kbd "C-x C-e") 'skewer-coffee-eval-region)
        (define-key map (kbd "C-M-x")   'skewer-coffee-eval-defun)
        (define-key map (kbd "C-c C-k") 'skewer-coffee-eval-buffer)))
    "Keymap for skewer-coffee-mode.")

  ;;;###autoload
  (define-minor-mode skewer-coffee-mode
    "Minor mode for interactively loading coffeescript forms."
    :lighter " skewer-coffee"
    :keymap  skewer-coffee-mode-map
    :group   skewer)

  ;; Launch a static web server in the current project root
  ; (require 'elnode)
  ; (defun http-server-in-project (port)
  ;   (interactive "nPort: ")
  ;   (elnode-make-webserver (projectile-project-root) port))

  ;; symbols for some overlong function names
  (eval-after-load 'js3-mode
    '(font-lock-add-keywords
      'js3-mode
      (mapcar
       (lambda (pair)
         `(,(car pair)
           (0 (progn (compose-region
                      (match-beginning 0) (match-end 0)
                      ,(cadr pair))
                     nil))))
       '(("\\<function\\>" ?ƒ)
         ("\\<var\\>" ?Ʋ)
         ("\\<return\\>" ?«)
         ("\\<this\\>" ?@)))))

#+END_SRC

* Experimental
#+BEGIN_SRC emacs-lisp :tangle "experimental.el"

;; reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
(setq gc-cons-threshold 50000000)

(defun syn ()
  (interactive)
  (shell-command-on-region (point-min)
                           (point-max)
                           "syn -n"
                           nil
                           t)
  (ansi-color-apply-on-region (point-min)
                            (point-max)))

(defun nuke-all-buffers ()
  "Kill all buffers, leaving *scratch* only."
  (interactive)
  (mapc
   (lambda (buffer)
     (kill-buffer buffer))
   (buffer-list))
  (delete-other-windows))

(defun url-decode-region (beg end)
  (interactive "r")
  (let ((content (url-unhex-string (buffer-substring beg end))))
    (goto-char end)
    (newline)
    (insert content)))

(defun url-encode-region (beg end)
  (interactive "r")
  (let ((content (url-hexify-string (buffer-substring beg end))))
    (goto-char end)
    (newline)
    (insert content)))

(defun find-project-root (dir)
  (f--up (f-dir? (f-expand ".git" it)) dir))

(defun sp-kill-sexp-with-a-twist-of-lime ()
  (interactive)
  (if (sp-point-in-string)
      (let ((end (plist-get (sp-get-string) :end)))
        (kill-region (point) (1- end)))
    (let ((beg (line-beginning-position))
          (end (line-end-position)))
      (if (or (comment-only-p beg end)
              (s-matches? "\\s+" (buffer-substring-no-properties beg end)))
          (kill-line)
        (sp-kill-sexp)))))

(defun stk/find-function-or-variable-at-point ()
    "Find directly the function/variable at point in the other window.
     I don't care if is a function or a variable... just go there, Emacs!"
    (interactive)
    (let ((var (variable-at-point))
          (func (function-called-at-point)))
      (cond
       ((not (eq var 0)) (find-variable-other-window var))
        (func (find-function-other-window func))
         (t (message "Neither function nor variable found!"))))
     (setq ac-disable-faces nil))

;; TODO: add to all prog mode
(add-hook 'coffee-mode-hook
               (lambda ()
                (font-lock-add-keywords nil
                 '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

(defun filter-buffer-by-mode (mode)
  (-filter (lambda (buffer) (string= mode (buffer-mode buffer)))
           (buffer-list)))

(defadvice git-commit-commit (after delete-window activate)
  (delete-window))

(defun eval-and-replace (value)
  "Evaluate the sexp at point and replace it with its value."
  (interactive (list (eval-last-sexp nil)))
  (kill-sexp -1)
  (insert (format "%S" value)))

(defun flash-region (start end &optional timeout)
  "Temporarily highlight region from START to END."
  (let ((overlay (make-overlay start end)))
    (overlay-put overlay 'face 'secondary-selection)
    (run-with-timer (or timeout 0.2) nil 'delete-overlay overlay)))

(defun slurp (file)
  "Return FILE contents as a string."
  (with-temp-buffer
    (insert-file-contents file)
    (buffer-string)))

;; Quick switch to scratch buffers

(defmacro scratch-key (key buffer-name mode)
  `(global-set-key ,key (lambda ()
                          (interactive)
                          (switch-to-buffer ,buffer-name)
                          (unless (eq major-mode ',mode)
                            (,mode)))))

(scratch-key (kbd "C-S-s") "*scratch*"    emacs-lisp-mode)
(scratch-key (kbd "C-S-d") "*javascript*" js2-mode)
(scratch-key (kbd "C-S-a") "*lisp*"       lisp-mode)
(scratch-key (kbd "C-S-c") "*clojure*"    clojure-mode)
(scratch-key (kbd "C-S-x") "*css*"        css-mode)
(scratch-key (kbd "C-S-h") "*html*"       html-mode)



;; (defun push-first-button ()
;;   "Find and push the first button in this buffer, intended for `help-mode'."
;;   (interactive)
;;   (block :find-button
;;     (goto-char (point-min))
;;     (while (< (point) (point-max))
;;       (if (get-text-property (point) 'button)
;;           (return-from :find-button (push-button))
;;         (forward-char)))))
;
;; (define-key help-mode-map "f" 'push-first-button)

  (setq deft-extension "org")
  (setq deft-text-mode 'org-mode)

(defun get-last-message ()
  "ideally some kill-ring navigation. or helm??"
  (get-buffer "*Messages*")
  ;; grab last line and put into kill-ring
  )

(defun send-region-to-end-of-file ()
  "writing tools package or init file of someone had that...")

; ideal keybinding
; C-k C-k kill buffer

(defun nuke-useless-buffers ()
  "git, dired, emacs temp buffers"
)

(require 'sr-speedbar)

#+END_SRC
