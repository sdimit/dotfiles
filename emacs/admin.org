#+TITLE: Local User Customizations

* Appearance

#+begin_src emacs-lisp

  (set-face-attribute 'default nil
		 :family "PragmataPro"
		 :height 160
		 :weight 'normal
		 :width 'normal)

  (setq initial-scratch-message "")
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
  (set-scroll-bar-mode nil)
  (menu-bar-mode nil)

  ; (maximize-frame)

  (setq line-spacing 2)

  ; by default, do not display continuation lines, instead, give each line of the text just one screen line

  ; show the matching parentheses immediately
  (setq show-paren-delay 0)

; minimize fringe
  (setq-default indicate-empty-lines nil)
  (put 'upcase-region 'disabled nil)
  (fringe-mode 4)

  ;; Toggle line highlighting in all buffers
  (global-hl-line-mode nil)

  ; (load-theme 'zenburn)
  (load-theme 'solarized-dark t)

  (require 'surround)
  (global-surround-mode 1)

#+END_SRC

** Color Theme Tweaks
The theme package is loaded in =starter-kit-misc.org=. The settings
here adjust the height of some headings in Org and LaTeX mode, as well
as turning off the sans-serif heading style that AucTeX defaults to.

#+srcname: local-settings
#+begin_src emacs-lisp

  (add-hook 'latex-mode-hook
            (lambda ()
              (set-face-attribute 'font-latex-sectioning-5-face nil :inherit nil :foreground "#b58900")
              (set-face-attribute 'font-latex-sectioning-0-face nil :height 3)
              (set-face-attribute 'font-latex-sectioning-1-face nil :height 2)
              (set-face-attribute 'font-latex-sectioning-2-face nil :height 1.5)
              (set-face-attribute 'font-latex-sectioning-3-face nil :height 1.2)
              (set-face-attribute 'font-latex-sectioning-4-face nil :height 1.0)))

;   (add-hook 'org-mode-hook
;             (lambda ()
;               (set-face-attribute 'org-level-1 nil :height 1.5)
;               (set-face-attribute 'org-level-2 nil :height 1.2)
;               (set-face-attribute 'org-level-3 nil :height 1.1)
;               (set-face-attribute 'org-level-4 nil :height 1.1)
;               (set-face-attribute 'org-level-5 nil :height 1.1)))

#+end_src

** Adjust font size
#+begin_src emacs-lisp
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+end_src

** Mode line
#+begin_src emacs-lisp
     (require 'smart-mode-line)

     (sml/setup)

     (add-to-list 'sml/hidden-modes " GitGutter")
     (add-to-list 'sml/hidden-modes " Lisp Interaction")
     (add-to-list 'sml/hidden-modes " ElDoc")
     (add-to-list 'sml/hidden-modes " Paredit")
     (add-to-list 'sml/hidden-modes " hl-sexp")
     (add-to-list 'sml/hidden-modes " Fill")
     (add-to-list 'sml/hidden-modes " AC")
     (add-to-list 'sml/hidden-modes " yas")
     (add-to-list 'sml/hidden-modes " Projectile")
     (add-to-list 'sml/hidden-modes " pair")
     (add-to-list 'sml/hidden-modes " Wrap")
     (add-to-list 'sml/hidden-modes " vl")
     (add-to-list 'sml/hidden-modes " Undo-Tree")

#+end_src

* Buffers
** Winner mode
    Remember the previous window configurations and jump back to them
    as needed (as when, e.g., some other mode messes with your working
    layout.) Rebind the default keys to C-c-up and C-c-down as in a moment
    we'll assign C-c-right for rotating windows.

#+source: local-winner-mode
#+begin_src emacs-lisp
  (winner-mode 1)
  (global-set-key (kbd "C-c <up>") 'winner-undo)
  (global-set-key (kbd "C-c <down>") 'winner-redo)
#+end_src
** Window switching.
=C-x o= goes to the next window, Shift+direction arrow moves between frames.
#+begin_src emacs-lisp
(windmove-default-keybindings)
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two
(setq windmove-wrap-around t)
#+end_src

** Resizing Windows on the fly
When your frame (i.e., the main Emacs window) is split into different parts (e.g. using =C-x 2= or =C-x 3=), you sometimes want to resize these parts dynamically. This defines =Shift-C-[arrow keys]= so you can do this easily.

#+srcname: resize-splits
#+begin_src emacs-lisp
  ;; resizing 'windows' (i.e., inside the frame)
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+end_src

** Rotate Windows in a Frame
When windows get out of order, you can rotate them.

#+source: rotate-windows
#+begin_src emacs-lisp
   (defun rotate-windows ()
     "Rotate your windows" (interactive) (cond ((not (> (count-windows) 1)) (message "You can't rotate a single window!"))
  (t
   (setq i 1)
   (setq numWindows (count-windows))
   (while  (< i numWindows)
     (let* (
            (w1 (elt (window-list) i))
            (w2 (elt (window-list) (+ (% i numWindows) 1)))
            (b1 (window-buffer w1))
            (b2 (window-buffer w2))
            (s1 (window-start w1))
            (s2 (window-start w2))
            )
       (set-window-buffer w1  b2)
       (set-window-buffer w2 b1)
       (set-window-start w1 s2)
       (set-window-start w2 s1)
       (setq i (1+ i)))))))

  (global-set-key (kbd "C-c m") 'rotate-windows)
#+end_src

* Tags
#+BEGIN_SRC emacs-lisp

 (global-set-key (kbd "C-]") 'helm-etags-select)

#+END_SRC

* Editing
** Expand Region
** Indentation
#+begin_src emacs-lisp
;; default tab-width is two spaces
(setq-default tab-width 2
              js-indent-level 2
              c-basic-offset 2
              indent-tabs-mode nil)

(global-set-key (kbd "C-x a") 'join-line)
#+end_src

** CUA mode for rectangle editing
Sometimes very useful (but we don't use the core cua keys.)

#+source: cua-rectangle
#+begin_src emacs-lisp
  (setq cua-enable-cua-keys nil)
  (cua-mode)

;; To start a rectangle, use [C-return] and extend it using the normal
;; movement keys (up, down, left, right, home, end, C-home,
;; C-end). Once the rectangle has the desired size, you can cut or
;; copy it using C-w and M-w, and you can
;; subsequently insert it - as a rectangle - using C-y.  So
;; the only new command you need to know to work with cua-mode
;; rectangles is C-return!
;;
;; Normally, when you paste a rectangle using C-v (C-y), each line of
;; the rectangle is inserted into the existing lines in the buffer.
;; If overwrite-mode is active when you paste a rectangle, it is
;; inserted as normal (multi-line) text.
;;
;; And there's more: If you want to extend or reduce the size of the
;; rectangle in one of the other corners of the rectangle, just use
;; [return] to move the cursor to the "next" corner.  Or you can use
;; the [M-up], [M-down], [M-left], and [M-right] keys to move the
;; entire rectangle overlay (but not the contents) in the given
;; direction.
;;
;; [C-return] cancels the rectangle
;; [C-space] activates the region bounded by the rectangle

;; cua-mode's rectangle support also includes all the normal rectangle
;; functions with easy access:
;;
;; [M-a] aligns all words at the left edge of the rectangle
;; [M-b] fills the rectangle with blanks (tabs and spaces)
;; [M-c] closes the rectangle by removing all blanks at the left edge
;;       of the rectangle
;; [M-f] fills the rectangle with a single character (prompt)
;; [M-i] increases the first number found on each line of the rectangle
;;       by the amount given by the numeric prefix argument (default 1)
;;       It recognizes 0x... as hexadecimal numbers
;; [M-k] kills the rectangle as normal multi-line text (for paste)
;; [M-l] downcases the rectangle
;; [M-m] copies the rectangle as normal multi-line text (for paste)
;; [M-n] fills each line of the rectangle with increasing numbers using
;;       a supplied format string (prompt)
;; [M-o] opens the rectangle by moving the highlighted text to the
;;       right of the rectangle and filling the rectangle with blanks.
;; [M-p] toggles virtual straight rectangle edges
;; [M-P] inserts tabs and spaces (padding) to make real straight edges
;; [M-q] performs text filling on the rectangle
;; [M-r] replaces REGEXP (prompt) by STRING (prompt) in rectangle
;; [M-R] reverse the lines in the rectangle
;; [M-s] fills each line of the rectangle with the same STRING (prompt)
;; [M-t] performs text fill of the rectangle with TEXT (prompt)
;; [M-u] upcases the rectangle
;; [M-|] runs shell command on rectangle
;; [M-'] restricts rectangle to lines with CHAR (prompt) at left column
;; [M-/] restricts rectangle to lines matching REGEXP (prompt)
;; [C-?] Shows a brief list of the above commands.

;; [M-C-up] and [M-C-down] scrolls the lines INSIDE the rectangle up
;; and down; lines scrolled outside the top or bottom of the rectangle
;; are lost, but can be recovered using [C-z].

#+end_src

   Expand selected region by semantic units. Just keep pressing the key until it selects what you want.
#+source: expand-region
#+begin_src emacs-lisp
    (require 'expand-region)
    (global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

**
** Multiple Cursors
   Use multiple cursors for search, replace, and text-cleaning tasks. For a demonstration, see http://emacsrocks.com/e13.html
#+source: multiple-cursors
#+begin_src emacs-lisp
  (require 'multiple-cursors)
  ;; When you have an active region that spans multiple lines, the following will add a cursor to each line:
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

  (global-set-key (kbd "C-S-c C-e") 'mc/edit-ends-of-lines)
  (global-set-key (kbd "C-S-c C-a") 'mc/edit-beginnings-of-lines)

  ;; When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

  ;; Rectangular region mode
  (global-set-key (kbd "H-SPC") 'set-rectangular-region-anchor)

  ;; Mark more like this
  (global-set-key (kbd "H-a") 'mc/mark-all-like-this)
  (global-set-key (kbd "H-p") 'mc/mark-previous-like-this)
  (global-set-key (kbd "H-n") 'mc/mark-next-like-this)
  (global-set-key (kbd "H-S-n") 'mc/mark-more-like-this-extended)
  (global-set-key (kbd "H-S-a") 'mc/mark-all-in-region)
#+end_src

First mark the word, then add more cursors. To get out of multiple-cursors-mode, press <return> or C-g. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use C-j.

* Search
** Activate occur easily inside isearch
#+begin_src emacs-lisp
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))
#+end_src
** Interface with Ack
Ack is "better than grep" and written in Perl.

#+source: ack
#+begin_src emacs-lisp
  (require 'ack-and-a-half)
  ;; Create shorter aliases
  (defalias 'ack 'ack-and-a-half)
  (defalias 'ack-same 'ack-and-a-half-same)
  (defalias 'ack-find-file 'ack-and-a-half-find-file)
  (defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)
  ; (define-key global-map "\C-x a" 'ack)

#+end_src

** Rgrep
Rgrep is infinitely useful in multi-file projects.

(see [[elisp:(describe-function 'rgrep)]])

#+begin_src emacs-lisp
  (define-key global-map "\C-x\C-r" 'rgrep)
#+end_src
** Use regex searches by default.
#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "\C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

** Convenience Function to search for regexps build with re-builder
   Re-Builder (=M-x regexp-builder=) is a very convenient way to dynamically build regular expressions for searching and replacing. You enter a minibuffer that lets you type the regexp and the prospective matches to the expression you type are highlighted in the main buffer. In the re-builder minibuffer, =C-c C-w= copies the current expression to the kill-ring (clipboard) and =C-c C-q= quits. The expression is copied as a string, which is useful if you're writing lisp but it will not work if you copy it in to =C-M-%= or =query-replace-regexp=. But usually this is exactly what I want to do---take the expression I've built in re-buider and immediately use it to search and replace in a buffer. With the function below, you can do this. After you've built the expression and copied it wtih =C-c C-w=, quit re-bulder and do =M-x reb-query-replace=.

#+source: rexep-copy
#+begin_src emacs-lisp
  (defun reb-query-replace (to-string)
      "Replace current RE from point with `query-replace-regexp'."
      (interactive
       (progn (barf-if-buffer-read-only)
              (list (query-replace-read-to (reb-target-binding reb-regexp)
                                           "Query replace"  t))))
      (with-current-buffer reb-target-buffer
        (query-replace-regexp (reb-target-binding reb-regexp) to-string)))

#+end_src

** Browse the Kill Ring
    Conveniently navigate the kill-ring (ie, the cut/copy clipboard
    history) in a pop-up buffer.
#+srcname: kill-ring
#+begin_src emacs-lisp
  (when (require 'browse-kill-ring nil 'noerror)
  (browse-kill-ring-default-keybindings))
#+end_src

* Help
** Help should search more than just commands
#+begin_src emacs-lisp
(global-set-key (kbd "C-h a") 'apropos)
#+end_src
* Navigation
** Smex replaces M-x
    Smex replaces M-x, and is built on top of ido-mode. See
    http://github.com/nonsequitur/smex or
    http://www.emacswiki.org/emacs/Smex for details.
#+srcname: smex
#+begin_src emacs-lisp
  (require 'smex)
  (smex-initialize)

  (define-key evil-motion-state-map ":" 'smex)

  (global-set-key (kbd "C-x C-m") 'evil-ex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "C-x C-M") 'smex-major-mode-commands)
  (setq smex-show-unbound-commands t)
  (smex-auto-update 30)

  (setq mac-option-modifier 'meta)

  ; some shortcuts from evil-ex for M-x

  (defun w ()
    ":w shortcut"
    (interactive)
    (save-buffer))

  (defun only ()
    ":only"
    (interactive)
    (delete-other-windows))



#+end_src

* Completion
#+begin_src emacs-lisp
  (require 'fuzzy)
  (require 'auto-complete)
  (setq ac-auto-show-menu t
        ac-quick-help-delay 0.1
        ac-use-fuzzy t)
  (global-auto-complete-mode +1)

  (global-set-key (kbd "M-/") 'hippie-expand)

  ;; Hippie expand: look in buffer before filenames please
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol))

  (defun hippie-expand-lines ()
    (interactive)
    (let ((hippie-expand-try-functions-list '(try-expand-line
                                              try-expand-line-all-buffers)))
      (hippie-expand nil)))

#+end_src

* Evil-mode
#+BEGIN_SRC emacs-lisp

  (evil-mode 1)

  ; evil leader mode
  (global-evil-leader-mode)

  ; (evil-leader/set-leader "<space>")
  ; (setq evil-leader/in-all-states t)

  (setq evil-want-C-u-scroll t)
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)

  (defun my-move-key (keymap-from keymap-to key)
       "Moves key binding from one keymap to another, deleting from the old location. "
       (define-key keymap-to key (lookup-key keymap-from key))
       (define-key keymap-from key nil))

  ; (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))

  ; (my-move-key evil-motion-state-map evil-normal-state-map " ")

  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (defun start-shell ()
     (interactive)
     (ansi-term explicit-shell-file-name))

  ; (define-key evil-normal-state-map ":l" 'cycle-buffer)

  ; (define-key evil-normal-state-map "  " 'ace-jump-mode)
  (define-key evil-normal-state-map " k" 'ace-jump-char-mode)
  (define-key evil-normal-state-map " p" 'projectile-find-file)
  (define-key evil-normal-state-map " b" 'ido-switch-buffer)
  (define-key evil-normal-state-map " t" 'find-tag)

  (define-key evil-normal-state-map " s" 'magit-status)
  (define-key evil-normal-state-map " S" 'magit-status-only)
  (define-key evil-normal-state-map " l" 'magit-log-current-file)
  (define-key evil-normal-state-map " L" 'magit-log)

  (define-key evil-normal-state-map " T" 'start-shell)
  (define-key evil-normal-state-map " a" 'ack)
  ; (define-key evil-normal-state-map " n" 'switch-to-buffer-other-window)
  (define-key evil-normal-state-map " n" 'pop-to-buffer)

  ; (define-key evil-normal-state-map " s" 'textmate-goto-symbol)
  ; (define-key evil-normal-state-map " m" 'evil-jump-item)

  (define-key evil-normal-state-map "Q" 'kill-current-buffer)
  (define-key evil-normal-state-map "q" 'delete-window)
  (define-key evil-normal-state-map "j" 'evil-next-visual-line)
  (define-key evil-normal-state-map "k" 'evil-previous-visual-line)

  ; (define-key evil-normal-state-map "-" 'delete-other-windows)
  (define-key evil-normal-state-map " e" 'ido-find-file)

  ; (define-key evil-normal-state-map "\\" 'evil-repeat-find-char-reverse)
  (define-key evil-normal-state-map "H" 'evil-first-non-blank)
  ; (define-key evil-normal-state-map "Y" 'copy-to-end-of-line)
  (define-key evil-normal-state-map "L" 'evil-last-non-blank)
  ; (define-key evil-normal-state-map (kbd "<tab>") 'indent-for-tab-command)
  ; (define-key evil-normal-state-map (kbd "<C-return>") 'new-line-in-normal-mode)
  ; (define-key evil-normal-state-map (kbd "M-t") 'projectile-find-file)
  ; (define-key evil-normal-state-map (kbd "M-j") 'evil-window-next)
  ; (define-key evil-normal-state-map (kbd "M-.") 'my-find-tag)
  ; (define-key evil-normal-state-map (kbd "C-SPC") 'comment-or-uncomment-region-or-line)
  ; (define-key evil-normal-state-map (kbd "M-k") 'cycle-buffer)
  ; (define-key evil-normal-state-map (kbd "M-K") 'cycle-buffer-backward)
  ; (define-key evil-normal-state-map (kbd "M-o") 'session-jump-to-last-change)

  ; (define-key evil-normal-state-map (kbd "C-k") 'smart-up)
  ; (define-key evil-normal-state-map (kbd "C-j") 'smart-down)
  ; (define-key evil-normal-state-map (kbd "C-l") 'smart-forward)
  ; (define-key evil-normal-state-map (kbd "C-h") 'smart-backward)
  ; (evil-define-key 'visual global-map (kbd ",re") 'dr/extract-variable)
  ; (evil-define-key 'normal global-map (kbd ",ri") 'dr/inline-variable)

  ; (define-key evil-normal-state-map "\C-u" 'evil-scroll-up)

  ; (define-key evil-normal-state-map "vv" 'split-window-horizontally)
  ; TODO switch to new split too!
  ; (define-key evil-normal-state-map "\C-l" 'evil-window-right)

    (defun ex-mode-mapping (cmd)
      (let ((binding (car cmd))
            (fn (cdr cmd)))
        (evil-ex-define-cmd binding fn)))

    (mapcar 'ex-mode-mapping
        '(("!"                        . shell-command)
          ("log"                      . magit-log)
          ("branch"                   . magit-branch-manager)
          ("deft"                     . deft)))

;; magit
(evil-add-hjkl-bindings magit-branch-manager-mode-map 'emacs
  "K" 'magit-discard-item
  "L" 'magit-key-mode-popup-logging)
(evil-add-hjkl-bindings magit-status-mode-map 'emacs
  "K" 'magit-discard-item
  "l" 'magit-key-mode-popup-logging
  "h" 'magit-toggle-diff-refine-hunk)

;; use emacs in the following modes
(mapc (lambda (mode) (evil-set-initial-state mode 'emacs))
       '(inferior-emacs-lisp-mode
         comint-mode
         shell-mode
         term-mode
         jabber-roster-mode
         jabber-chat-mode
         nrepl-mode
         magit-branch-manager-mode))

#+END_SRC


#+END_SRC

* Other
#+BEGIN_SRC emacs-lisp

    (setq c-basic-offset 2)

    (global-set-key "\C-\\" 'comment-region)

    (load "dired-x")

    (require 'highlight-sexp)
    (setq hl-sexp-background-color "#073642")
    ; adapted for dark solarized

    (add-hook 'clojure-mode-hook 'highlight-sexp-mode)
    (add-hook 'emacs-lisp-mode-hook 'highlight-sexp-mode)

    ; from yegge

    (global-set-key "\C-x\C-m" 'smex)
    (global-set-key "\C-c\C-m" 'sme)

    (global-git-gutter+-mode t)

    ; (global-set-key (kbd "] e") 'shift-text-up)
    ; (global-set-key (kbd "[ e") 'shift-text-down)

    ; (global-set-key (kbd "\] g") 'git-gutter+-next-hunk)
    ; (global-set-key (kbd "\[ g") 'git-gutter+-previous-hunk)

    ; (setq projectile-cache-file (concat tmp-dir "projectile.cache"))


    (global-set-key (kbd "C-x g") 'helm-git-grep)

    (global-set-key (kbd "C-x C-z") 'helm-mini)
    (global-set-key (kbd "M-f") 'helm-recentf)

    ; (setq helm-input-idle-delay 0.1) ;; I want it now!

    (add-hook 'emacs-startup-hook #'(lambda ()
                                    (let ((default-directory (getenv "HOME")))
                                    (command-execute 'eshell)
                                    (bury-buffer))))

    ;; Add keybindings for commenting regions of text
    (global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)
    (global-set-key (kbd "M-'") 'comment-or-uncomment-region)

    ;; custom variables kludge. Why can't I get these to work via setq?
    (custom-set-variables
    ;; custom-set-variables was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
    '(LaTeX-XeTeX-command "xelatex -synctex=1")
    '(TeX-engine (quote xetex))
    ;; '(TeX-view-program-list (quote (("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b"))))
    ;; '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Skim") (output-html "xdg-open"))))
    '(show-paren-mode t)
    '(blink-cursor-mode nil)
    '(text-mode-hook (quote (text-mode-hook-identify)))
    )

    (defun focus-minibuffer ()
      "switch to minibuffer window (if active)"
      (interactive)
      (when (active-minibuffer-window)
        (select-window (active-minibuffer-window))))


  ; FIXME
    (global-set-key (kbd "C-f") 'focus-minibuffer)

  ; FIXME
    (global-set-key (kbd "C-c SPC") 'evil-ace-jump-char-mode)

    ;; no duplicates in command history
    (setq comint-input-ignoredups t)

    (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                             ("gnu"       . "http://elpa.gnu.org/packages/")
                             ("melpa"     . "http://melpa.milkbox.net/packages/")
                             ("tromey"    . "http://tromey.com/elpa/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")))

#+end_src

** Emacs server mode
   Let's support emacsclient. For that to work, we'll need to start the server.
   Unless, of course, it's already running.

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p) (server-start))
#+end_src

** Web-mode
   An actual major mode that works html and templates? Let's get
   that!

#+BEGIN_SRC emacs-lisp

(require 'web-mode)

(add-to-list 'auto-mode-alist '("\\.html$" . web-mode))

(define-key web-mode-map (kbd "C-n") 'web-mode-tag-match)
(define-key web-mode-map (kbd "C-f") 'web-mode-fold-or-unfold)
(define-key web-mode-map (kbd "C-'") 'web-mode-mark-and-expand)

(set-face-attribute 'web-mode-html-tag-face nil :foreground "DarkViolet")

(add-hook 'web-mode-hook 'zencoding-mode)
#+END_SRC

** Expand-region
    Lets you do wonderful things with regions.
#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "contrib/expand-region"))
(require 'expand-region)


#+end_src

** Multiple-cursors

#+begin_src emacs-lisp
(require 'multiple-cursors)

(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

** Speedbar
   IDE/textmate-style file-tree tray
   Start with "M-x speedbar"

   Small tweaks:
   - I want to see all files, whether they're recognized as known file type or not by speedbar.
   - Put speedbar frame on left by default, like most IDEs
   - Auto-update speedbar buffer/frame

   #+begin_src emacs-lisp
   (custom-set-variables
     '(speedbar-default-position (quote left))
     '(speedbar-show-unknown-files t)
     '(speedbar-update-flag t))
   #+end_src

** Make sure buffers update when files change
   By default, Emacs will not update the contents of open buffers when
   a file changes on disk. This is inconvenient when switching
   branches in Git - as you'd risk editing stale buffers.

   This problem can be solved:

#+begin_src emacs-lisp
(global-auto-revert-mode)
#+end_src

** Scrolling is not very smooth by default in Emacs, let's fix it
#+begin_src emacs-lisp
(setq scroll-conservatively 10000
      scroll-step 1)
#+end_src

** Stop creating backup~ and #auto-save# files
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src

** Auto refresh dired, but be quiet about it
#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

** Lines should be 80 characters wide, not 72
#+begin_src emacs-lisp
(setq fill-column 80)
#+end_src

** Don't break lines
#+begin_src emacs-lisp
(setq-default truncate-lines t)
(setq-default global-visual-line-mode  t)
#+end_src

** Fontify org-mode code blocks
#+begin_src emacs-lisp
; (setq org-src-fontify-natively t)
#+end_src

** indent after hitting a new line
#+begin_src emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
#+end_src

** Get ansi color in terminals
#+begin_src emacs-lisp
    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src

** quick jump to .emacs.d

Make updating my emacs config super low threshold.

#+begin_src emacs-lisp
(defun edit-emacs-config ()
 (interactive)
 (find-file-other-window "~/.emacs.d/admin.org"))

(global-set-key (kbd "C-h C-c") 'edit-emacs-config)

(defun reload-emacs-config ()
  (interactive)
  (save-window-excursion
    (find-file "~/.emacs.d/init.el")
    (eval-buffer)))

#+end_src

** kill trailing whitespace on file saves
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** rename both the file and buffer
#+begin_src emacs-lisp
(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))
#+end_src
** Debug mode

#+BEGIN_SRC emacs-lisp
  (defun trace-errors ()
    (interactive)
    (setq debug-on-error t))
#+END_SRC


** Align your code
#+begin_src emacs-lisp
(global-set-key (kbd "C-x \\") 'align-regexp)
#+end_src

* Lisp
** Should be able to eval-and-replace anywhere.
#+begin_src emacs-lisp
(global-set-key (kbd "C-c e") 'eval-and-replace)


;     (setq my/lisps
;	   '(emacs-lisp lisp clojure))
;
;     (defun my/general-lisp-hooks
;       ()
;       (my/turn-on 'paredit
;		   'rainbow-delimiters
;		   'highlight-parentheses))
;
;      (dolist (mode (mapcar 'my/->mode-hook my/lisps))
;        (add-hook mode
;	  'my/general-lisp-hooks))



#+end_src

* Helm
#+BEGIN_SRC emacs-lisp

(setq helm-input-idle-delay 0.1)
(setq helm-idle-delay 0.1)

(defun helm-opened ()
  (interactive)
  (helm-other-buffer '(helm-c-source-buffers
                       helm-c-source-recentf)
                     "*helm opened*"))

#+END_SRC

* Clojure
#+begin_SRC emacs-lisp

  ; fourclojure
  (add-to-list 'load-path "~/.emacs.d/src/4clj-el/")
  (require 'four-clj)

  (defun clojure-pretty-lambdas ()
    (font-lock-add-keywords
     nil `(("(\\(defn\\>\\)"
            (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                      ,(make-char 'greek-iso8859-7 107))
                      nil))))))

  (setq nrepl-popup-stacktraces nil)
  (setq nrepl-popup-stacktraces-in-repl t)

#+END_SRC

* Django
#+BEGIN_SRC emacs-lisp

(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

(exec-path-from-shell-copy-env "PYTHONPATH")


(defun pudb ()
  "Add a break point"
  (interactive)
  (newline-and-indent)
  (insert "import pudb; pudb.set_trace()")
  (highlight-lines-matching-regexp "^[ ]*import pudb; pudb.set_trace()"))

(defun ipdb ()
  "Add a break point"
  (interactive)
  (newline-and-indent)
  (insert "import ipdb; ipdb.set_trace()")
  (highlight-lines-matching-regexp "^[ ]*import ipdb; ipdb.set_trace()"))

 ; (define-key python-mode-map (kbd "C-c C-b") 'python-add-breakpoint)

(add-hook 'python-mode-hook 'auto-complete-mode)

(add-hook 'python-mode-hook 'jedi:ac-setup)
(setq jedi:setup-keys nil)
(setq jedi:complete-on-dot t)
(setq jedi:tooltip-method nil)

(defvar nose-use-verbose nil)

; (setq flymake-python-pyflakes-executable "flake8")
; (require 'flymake-python-pyflakes)
; (add-hook 'python-mode-hook 'flymake-python-pyflakes-load)

#+END_SRC

* 10to8
#+BEGIN_SRC emacs-lisp


; (defcustom virtualenv-workon-starts-python nil
;   "If non-nil the `virtualenv-workon' will also start python."
;   :group 'virtualenv
;   :type 'boolean)

(require 'virtualenvwrapper)
(venv-initialize-interactive-shells)
(venv-initialize-eshell)
(setq venv-location "~/.virtualenvs/")

(defun start-10to8 ()
  (interactive)
  (venv-workon "Native")
  (setq python-django-project-root "~/10to8/Native/native/src/")
  (python-django-open-project "~/10to8/Native/native/src/core" "core.settings")
  ; (python-django-qmgmt-runserver "localhost:8000")
)

 (require 'nose)
 (add-to-list 'nose-project-root-files ".project")

#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp

        (defun magit-status-only ()
           (interactive)
           (magit-status default-directory)
           (delete-other-windows))

        (defun magit-log-current-file ()
           (interactive)
           (magit-file-log (buffer-file-name (current-buffer))))

        (global-set-key (kbd "C-x m") 'magit-status-only)
        (global-set-key (kbd "C-x M") 'magit-status)

        (require 'helm-open-github)

        ; copies url of current selected region into clipboard (for easy sharing in IM)
        ; depends on helm-open-github)

        (defun yank-github-url-for-region ()
          (interactive)
          (if (not mark-active)
            (print "no region selected")
            (let* (
                 (file (buffer-file-name))
                 (start (region-beginning))
                 (end (region-end))
                 (root (helm-open-github--root-directory))
                 (repo-path (file-relative-name file root))
                 (start-line (line-number-at-pos start))
                 (end-line (line-number-at-pos end)))

              (kill-new (-get-github-url-for-file-region repo-path start-line end-line)))
            ))

        (defun -get-github-url-for-file-region (file &optional start end)
          (let ((host (helm-open-github--host))
                (remote-url (helm-open-github--remote-url))
                (branch (helm-open-github--branch))
                (marker (helm-open-github--highlight-marker start end)))
            (helm-open-github--file-url host remote-url branch file marker)))

    ;     (define-key magit-branch-manager-mode-map (kbd "/") 'evil-search-forward)
    ;     (define-key magit-branch-manager-mode-map (kbd "C-n") 'evil-search-next)
    ;     (evil-define-key 'normal magit-log-edit-mode-map "q" 'magit-log-edit-commit)


        (defun ediff-current-file-on-git ()
          ""
          (interactive)
          (ediff-revision (buffer-file-name (current-buffer))))

      (define-key evil-normal-state-map " d" 'ediff-current-file-on-git)

        (add-hook 'magit-log-edit-mode-hook
                  '(lambda ()
                     (flyspell-mode t)))


#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp

    (require 'projectile)
    (projectile-global-mode)

    (define-key projectile-mode-map [?\s-j] 'projectile-switch-project)
    (define-key projectile-mode-map [?\s-d] 'projectile-find-dir)
    (define-key projectile-mode-map [?\s-a] 'projectile-ack)
    (define-key projectile-mode-map [?\s-p] 'projectile-find-file)
    (define-key projectile-mode-map [?\s-t] 'helm-etags-select)

    (add-to-list 'ack-and-a-half-project-root-file-patterns ".projectile\\'")

    (defcustom projectile-switch-project-action 'helm-projectile
      ""
      :group 'projectile
      :type 'symbol)

    ; (setq projectile-completion-system 'grizzl)

    (setq projectile-completion-system 'ido)

    ; (setq projectile-require-project-root nil)
    (setq projectile-enable-caching t)

    (global-set-key (kbd "C-x f") 'helm-projectile)

#+end_src

#+RESULTS:

* Pandoc
A pandoc menu for markdown and tex files.
#+src-name: pandoc_mode
#+begin_src emacs-lisp
;  (load "pandoc-mode")
;  (add-hook 'markdown-mode-hook 'turn-on-pandoc)
;  (add-hook 'TeX-mode-hook 'turn-on-pandoc)
;  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
#+end_src
* Org-mode

** customizations

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-font-lock)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src

** Smart-quote binding
When in an org-mode buffer, bind TeX-insert-quote to =C-c "=. Turned off by default.

#+source: org-mode-smartquote-key
#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook 'smart-quote-keys)

  (defun smart-quote-keys ()
    (require 'typopunct)
    (typopunct-change-language 'english)
    (local-set-key (kbd "C-c \'") 'typopunct-insert-single-quotation-mark)
    (local-set-key (kbd "C-c \"") 'typopunct-insert-quotation-mark)
    )



#+end_src

** Babel Settings
   Configure org-mode so that when you edit source code in an indirect buffer (with C-c '), the buffer is opened in the current window. That way, your window organization isn't broken when switching.

#+source: orgmode-indirect-buffer-settings
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

** XeLaTeX and pdfLaTeX Export Settings
   Configure org-mode to export directly to PDF using pdflatex or
   xelatex, compiling the bibliography as it goes, with my preferred
   setup in each case. There is a good deal of local stuff in this section. The required style files used below are available at https://github.com/kjhealy/latex-custom-kjh. You may need to adjust or remove some of these settings depending on your
   preferences and local configuration.

#+source: orgmode-xelatex-export
#+begin_src emacs-lisp
    (require 'org-latex)
    ;; Choose either listings or minted for exporting source code blocks.
    ;; Using minted (as here) requires pygments be installed. To use the
    ;; default listings package instead, use
    ;; (setq org-export-latex-listings t)
    ;; and change references to "minted" below to "listings"
    (setq org-export-latex-listings 'minted)

    ;; default settings for minted code blocks
    (setq org-export-latex-minted-options
          '(;("frame" "single")
            ("bgcolor" "bg") ; bg will need to be defined in the preamble of your document. It's defined in org-preamble-pdflatex.sty and org-preamble-xelatex.sty below.
            ("fontsize" "\\small")
            ))
  ;; turn off the default toc behavior; deal with it properly in headers to files.
  (defun org-export-latex-no-toc (depth)
      (when depth
        (format "%% Org-mode is exporting headings to %s levels.\n"
                depth)))
  (setq org-export-latex-format-toc-function 'org-export-latex-no-toc)

    (add-to-list 'org-export-latex-classes
                 '("memarticle"
                   "\\documentclass[11pt,oneside,article]{memoir}\n\\input{vc} % vc package"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-export-latex-classes
                 '("membook"
                   "\\documentclass[11pt,oneside]{memoir}\n\\input{vc} % vc package"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
    ;; but adapted to use latexmk 4.22 or higher.
    (defun my-auto-tex-cmd ()
      "When exporting from .org with latex, automatically run latex,
                       pdflatex, or xelatex as appropriate, using latexmk."
      (let ((texcmd)))
      ;; default command: pdflatex
      (setq texcmd "latexmk -pdflatex='pdflatex -synctex=1 --shell-escape --' -pdf %f")
      ;; pdflatex -> .pdf
      (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
          (setq texcmd "latexmk -pdflatex='pdflatex -synctex=1 --shell-escape' -pdf %f"))
      ;; xelatex -> .pdf
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq texcmd "latexmk -pdflatex='xelatex -synctex=1 --shell-escape' -pdf %f"))
      ;; LaTeX compilation command
      (setq org-latex-to-pdf-process (list texcmd)))

    (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)

    ;; Default packages included in /every/ tex file, latex, pdflatex or xelatex
    (setq org-export-latex-packages-alist
          '(("" "graphicx" t)
            ("" "longtable" nil)
            ("" "float" )))

    ;; Custom packages
    (defun my-auto-tex-parameters ()
      "Automatically select the tex packages to include. See https://github.com/kjhealy/latex-custom-kjh for the support files included here."
      ;; default packages for ordinary latex or pdflatex export
      (setq org-export-latex-default-packages-alist
            '(("AUTO" "inputenc" t)
              ("minted,minion" "org-preamble-pdflatex" t)))
      ;; Packages to include when xelatex is used
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq org-export-latex-default-packages-alist
                '(("minted" "org-preamble-xelatex" t) ))))

    (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)
#+end_src

** ebib and citation settings
    ebib is a bibtex database manager that works inside emacs. It can
    talk to org-mode. See [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-17_2][this Worg tutorial]] for details.
#+source: ebib-setup
#+begin_src emacs-lisp
    (org-add-link-type "ebib" 'ebib)

   (org-add-link-type
     "cite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "cite:" desc)))
               (format "\\cite{%s}" path)
               (format "\\cite[%s]{%s}" desc path)
               )))))

   (org-add-link-type
     "parencite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "parencite:" desc)))
               (format "\\parencite{%s}" path)
               (format "\\parencite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
     "textcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "textcite:" desc)))
               (format "\\textcite{%s}" path)
               (format "\\textcite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
     "autocite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "autocite:" desc)))
               (format "\\autocite{%s}" path)
           (format "\\autocite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
   "footcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "footcite:" desc)))
           (format "\\footcite{%s}" path)
         (format "\\footcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "fullcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "fullcite:" desc)))
           (format "\\fullcite{%s}" path)
         (format "\\fullcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "citetitle" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitle:" desc)))
           (format "\\citetitle{%s}" path)
         (format "\\citetitle[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "citetitles" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitles:" desc)))
           (format "\\citetitles{%s}" path)
         (format "\\citetitles[%s]{%s}" desc path)
         )))))

  (org-add-link-type
     "headlessfullcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "headlessfullcite:" desc)))
               (format "\\headlessfullcite{%s}" path)
               (format "\\headlessfullcite[%s]{%s}" desc path)
  )))))
#+end_src
* Google
#+BEGIN_SRC emacs-lisp

(defun google-region ()
  "Googles a query or region if any."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Google: ")))))

#+END_SRC
* Minimap
  #+BEGIN_SRC emacs-lisp

    (defun toggle-minimap ()
      (interactive)
      (if (minimap-visible-p)
          (minimap-kill)
        (minimap-create)))

  #+END_SRC

* New
  #+BEGIN_SRC emacs-lisp

    (defun format-json ()
      (interactive)
      (let ((cmd "python -mjson.tool"))
        (shell-command-on-region (region-beginning) (region-end) cmd nil t)))

  #+END_SRC
* Dired
  #+BEGIN_SRC emacs-lisp
    (add-hook 'dired-mode-hook (lambda ()
      (define-key dired-mode-map "U" 'dired-up-directory)
      (define-key dired-mode-map "/" 'dired-isearch-filenames)))

  #+END_SRC

* Shell
#+BEGIN_SRC emacs-lisp

(setq explicit-shell-file-name "/bin/zsh")

#+END_SRC
* Other
#+BEGIN_SRC emacs-lisp

    (setq c-basic-offset 2)

    (global-set-key "\C-\\" 'comment-region)

    (load "dired-x")

    (require 'highlight-sexp)
    (setq hl-sexp-background-color "#073642")
    ; adapted for dark solarized

    (add-hook 'clojure-mode-hook 'highlight-sexp-mode)
    (add-hook 'emacs-lisp-mode-hook 'highlight-sexp-mode)

    ; from yegge

    (global-set-key "\C-x\C-m" 'smex)
    (global-set-key "\C-c\C-m" 'sme)

    (global-git-gutter+-mode t)

    ; (global-set-key (kbd "] e") 'shift-text-up)
    ; (global-set-key (kbd "[ e") 'shift-text-down)

    ; (global-set-key (kbd "\] g") 'git-gutter+-next-hunk)
    ; (global-set-key (kbd "\[ g") 'git-gutter+-previous-hunk)

    ; (setq projectile-cache-file (concat tmp-dir "projectile.cache"))


    (global-set-key (kbd "C-x g") 'helm-git-grep)

    (global-set-key (kbd "C-x C-z") 'helm-mini)
    (global-set-key (kbd "C-x C-d") 'helm-recentf)

    ; (setq helm-input-idle-delay 0.1) ;; I want it now!

    (add-hook 'emacs-startup-hook #'(lambda ()
                                    (let ((default-directory (getenv "HOME")))
                                    (command-execute 'eshell)
                                    (bury-buffer))))

    ;; Add keybindings for commenting regions of text
    (global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)
    (global-set-key (kbd "M-'") 'comment-or-uncomment-region)

    ;; custom variables kludge. Why can't I get these to work via setq?
    (custom-set-variables
    ;; custom-set-variables was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
    '(LaTeX-XeTeX-command "xelatex -synctex=1")
    '(TeX-engine (quote xetex))
    ;; '(TeX-view-program-list (quote (("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b"))))
    ;; '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Skim") (output-html "xdg-open"))))
    '(show-paren-mode t)
    '(blink-cursor-mode nil)
    '(text-mode-hook (quote (text-mode-hook-identify)))
    )

    (defun focus-minibuffer ()
      "switch to minibuffer window (if active)"
      (interactive)
      (when (active-minibuffer-window)
        (select-window (active-minibuffer-window))))


  ; FIXME
    (global-set-key (kbd "C-f") 'focus-minibuffer)

  ; FIXME
    (global-set-key (kbd "C-c SPC") 'evil-ace-jump-char-mode)

    ;; no duplicates in command history
    (setq comint-input-ignoredups t)

    (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                             ("gnu"       . "http://elpa.gnu.org/packages/")
                             ("melpa"     . "http://melpa.milkbox.net/packages/")
                             ("tromey"    . "http://tromey.com/elpa/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")))

#+end_src
* Files

#+BEGIN_SRC emacs-lisp

  ;; follow symlinks and don't ask questions
  (setq vc-follow-symlinks t)

  (setq confirm-nonexistent-file-or-buffer nil)


#+END_SRC
