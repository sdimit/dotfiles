* Starter kit basics

** Ubiquitous Packages

These should be loaded on startup rather than autoloaded on demand
since they are likely to be used in every session

#+srcname: starter-kit-load-on-startup
#+begin_src emacs-lisp
  (require 'cl)
  (require 'saveplace)
  (require 'ffap)
  (require 'uniquify)
  (require 'ansi-color)
  (require 'recentf)
#+end_src

** Function for loading/compiling starter-kit-*
#+srcname: starter-kit-load
#+begin_src emacs-lisp
  (defun starter-kit-load (file)
    "This function is to be used to load starter-kit-*.org files."
    (org-babel-load-file (expand-file-name file
                                           dotfiles-dir)))
#+end_src

#+source: starter-kit-compile
#+begin_src emacs-lisp
  (defun starter-kit-compile (&optional arg)
    "Tangle and Byte compile all starter-kit files."
    (interactive "P")
    (cl-flet ((age (file)
                (float-time
                 (time-subtract (current-time)
                                (nth 5 (or (file-attributes (file-truename file))
                                           (file-attributes file)))))))
      (mapc
       (lambda (file)
         (when (string= "org" (file-name-extension file))
           (let ((el-file (concat (file-name-sans-extension file) ".el")))
             (when (or arg
                       (not (and (file-exists-p el-file)
                                 (> (age file) (age el-file)))))
               (org-babel-tangle-file file el-file "emacs-lisp")
               (byte-compile-file el-file)))))
       (apply #'append
              (mapcar
               (lambda (d)
                 (when (and (file-exists-p d) (file-directory-p d))
                   (mapcar (lambda (f) (expand-file-name f d)) (directory-files d))))
               (list (concat dotfiles-dir user-login-name) dotfiles-dir))))))
#+end_src

** ELPA (Emacs Lisp Package Manager)
Load up [[http://tromey.com/elpa/][ELPA]], the Emacs Lisp package manager.

#+srcname: starter-kit-elpa
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu"         . "http://elpa.gnu.org/packages/")
          ("org"         . "http://orgmode.org/elpa/")
          ("melpa"   . "http://melpa.milkbox.net/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")))

;;; Add support to package.el for pre-filtering available packages
(defvar package-filter-function nil
  "Optional predicate function used to internally filter packages used by package.el.

The function is called with the arguments PACKAGE VERSION ARCHIVE, where
PACKAGE is a symbol, VERSION is a vector as produced by `version-to-list', and
ARCHIVE is the string name of the package archive.")

(defadvice package--add-to-archive-contents
  (around filter-packages (package archive) activate)
  "Add filtering of available packages using `package-filter-function', if non-nil."
  (when (or (null package-filter-function)
            (funcall package-filter-function
                     (car package)
                     (package-desc-vers (cdr package))
                     archive))
    ad-do-it))

(defvar melpa-exclude-packages
  '(slime)
  "Don't install Melpa versions of these packages.")

;; Don't take Melpa versions of certain packages
(setq package-filter-function
      (lambda (package version archive)
        (and
         (not (memq package '(eieio)))
         (or (not (string-equal archive "melpa"))
             (not (memq package melpa-exclude-packages))))))

  (package-initialize)
;  (starter-kit-load "starter-kit-elpa.org")
#+end_src

#+results: starter-kit-elpa
: loaded starter-kit-elpa.el

** Work around OS X bug

Work around a bug on OS X where system-name is FQDN
#+srcname: starter-kit-osX-workaround
#+begin_src emacs-lisp
  (if (eq system-type 'darwin)
      (setq system-name (car (split-string system-name "\\."))))
#+end_src

** System/User specific customizations

You can keep system- or user-specific customizations here in either
raw emacs-lisp files or as embedded elisp in org-mode files (as done
in this document).

#+srcname: starter-kit-user/system-setup
#+begin_src emacs-lisp
  (setq system-specific-config (concat dotfiles-dir system-name ".el")
        system-specific-literate-config (concat dotfiles-dir system-name ".org")
        user-specific-config (concat dotfiles-dir user-login-name ".el")
        user-specific-literate-config (concat dotfiles-dir user-login-name ".org")
        user-specific-dir (concat dotfiles-dir user-login-name))
  (add-to-list 'load-path user-specific-dir)
#+end_src

You can keep elisp source in the =src= directory.  Packages loaded
from here will override those installed by ELPA.  This is useful if
you want to track the development versions of a project, or if a
project is not in elpa.

#+srcname: starter-kit-load-elisp-dir
#+begin_src emacs-lisp
(setq elisp-source-dir (concat dotfiles-dir "src"))
(add-to-list 'load-path elisp-source-dir)
#+end_src

* Load the rest of the starter kit core
The following files contain the remainder of the core of the Emacs
Starter Kit.  All of the code in this section should be loaded by
everyone using the starter kit.

* Starter Kit Misc
Things that don't fit anywhere else.

** Check Dependencies

Determine whether required packages are installed. If not, use ELPA to
install them. Other dependencies are provided by Emacs 24.
#+begin_src emacs-lisp
  (dolist (package '(magit))
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

** Color Themes

#+source: colors
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa")
  (setq custom-safe-themes t)
#+end_src

** Window system

#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (blink-cursor-mode -1))
    (menu-bar-mode -1)

  (mouse-wheel-mode t)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (setq visible-bell t
        echo-keystrokes 0.1
        font-lock-maximum-decoration t
        font-lock-verbose nil
        inhibit-startup-message t
        transient-mark-mode t
      ;;  color-theme-is-global t
        delete-by-moving-to-trash t
        shift-select-mode nil
        truncate-partial-width-windows nil
        uniquify-buffer-name-style 'forward
        whitespace-style '(trailing lines space-before-tab
                                    indentation space-after-tab)
        whitespace-line-column 100
        ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally
        oddmuse-directory (concat dotfiles-dir "oddmuse")
        xterm-mouse-mode t
        save-place-file (concat dotfiles-dir "places"))
#+end_src

** Nxhtml -- utilities for web development
[[http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html][Nxhtml]] is a large package of utilities for web development and for
embedding multiple major modes in a single buffer.

Nxhtml is not installed in this version of the starter-kit by default,
for information on installing nxhtml see [[http://www.emacswiki.org/emacs/NxhtmlMode][EmacsWiki-Nxhtml]].

** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Enable syntax highlighting
#+begin_src emacs-lisp
(global-font-lock-mode t)
#+end_src

** Save a list of recent files visited.
#+begin_emacs-lisp
(recentf-mode 1)
#+end_emacs-lisp

** Highlight matching parentheses when the point is on them.
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

** ido mode
ido-mode is like magic pixie dust!
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp
  (when (> emacs-major-version 21)
    (ido-mode t)
    (setq ido-enable-prefix nil
          ido-enable-flex-matching t
          ido-create-new-buffer 'always
          ido-use-filename-at-point nil
          ido-max-prospects 10))
#+end_src

** Other, tabs, imenu and a coding hook
#+begin_src emacs-lisp
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)

  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-flyspell)

  (defvar starter-kit-coding-hook nil
    "Hook that gets run on activation of any programming mode.")

  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)
#+end_src

*** functions for prettier source code
#+begin_src emacs-lisp
(defun starter-kit-pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))

#+end_src


** Hippie expand: at times perhaps too hip
#+begin_src emacs-lisp
(delete 'try-expand-line hippie-expand-try-functions-list)
(delete 'try-expand-list hippie-expand-try-functions-list)
#+end_src

** Don't clutter up directories with files~
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat dotfiles-dir "backups")))))
#+end_src

** Associate modes with file extensions
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
#+end_src

** Default to unified diffs
#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src

** Cosmetics
This is turned off, as the color theme handles it.

#+begin_src emacs-lisp
  (eval-after-load 'diff-mode
    '(progn
       (set-face-foreground 'diff-added "green4")
       (set-face-foreground 'diff-removed "red3")))

  (eval-after-load 'magit
    '(progn
       (set-face-foreground 'magit-diff-add "green3")
       (set-face-foreground 'magit-diff-del "red3")))

#+end_src

* Load User/System Specific Files
** Settings from M-x customize
#+srcname: m-x-customize-customizations
#+begin_src emacs-lisp
  (load custom-file 'noerror)
#+end_src

