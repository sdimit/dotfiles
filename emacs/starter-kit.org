#+TITLE: Emacs Starter Kit
#+SEQ_TODO: PROPOSED TODO STARTED | DONE DEFERRED REJECTED
#+OPTIONS: H:2 num:nil toc:t
#+STARTUP: oddeven

* Starter kit basics

** Load path etc.

#+srcname: starter-kit-load-paths
#+begin_src emacs-lisp
  (setq dotfiles-dir (file-name-directory
                      (or load-file-name (buffer-file-name))))

  (add-to-list 'load-path dotfiles-dir)
  (setq autoload-file (concat dotfiles-dir "loaddefs.el"))
  (setq package-user-dir (concat dotfiles-dir "elpa"))
  (setq custom-file (concat dotfiles-dir "custom.el"))
#+end_src

** Ubiquitous Packages

These should be loaded on startup rather than autoloaded on demand
since they are likely to be used in every session

#+srcname: starter-kit-load-on-startup
#+begin_src emacs-lisp
  (require 'cl)
  (require 'saveplace)
  (require 'ffap)
  (require 'uniquify)
  (require 'ansi-color)
  (require 'recentf)
#+end_src

** Function for loading/compiling starter-kit-*
#+srcname: starter-kit-load
#+begin_src emacs-lisp
  (defun starter-kit-load (file)
    "This function is to be used to load starter-kit-*.org files."
    (org-babel-load-file (expand-file-name file
                                           dotfiles-dir)))
#+end_src

#+source: starter-kit-compile
#+begin_src emacs-lisp
  (defun starter-kit-compile (&optional arg)
    "Tangle and Byte compile all starter-kit files."
    (interactive "P")
    (cl-flet ((age (file)
                (float-time
                 (time-subtract (current-time)
                                (nth 5 (or (file-attributes (file-truename file))
                                           (file-attributes file)))))))
      (mapc
       (lambda (file)
         (when (string= "org" (file-name-extension file))
           (let ((el-file (concat (file-name-sans-extension file) ".el")))
             (when (or arg
                       (not (and (file-exists-p el-file)
                                 (> (age file) (age el-file)))))
               (org-babel-tangle-file file el-file "emacs-lisp")
               (byte-compile-file el-file)))))
       (apply #'append
              (mapcar
               (lambda (d)
                 (when (and (file-exists-p d) (file-directory-p d))
                   (mapcar (lambda (f) (expand-file-name f d)) (directory-files d))))
               (list (concat dotfiles-dir user-login-name) dotfiles-dir))))))
#+end_src

** ELPA (Emacs Lisp Package Manager)
Load up [[http://tromey.com/elpa/][ELPA]], the Emacs Lisp package manager.

#+srcname: starter-kit-elpa
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu"         . "http://elpa.gnu.org/packages/")
          ("org"         . "http://orgmode.org/elpa/")
          ("melpa"   . "http://melpa.milkbox.net/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")))

;;; Add support to package.el for pre-filtering available packages
(defvar package-filter-function nil
  "Optional predicate function used to internally filter packages used by package.el.

The function is called with the arguments PACKAGE VERSION ARCHIVE, where
PACKAGE is a symbol, VERSION is a vector as produced by `version-to-list', and
ARCHIVE is the string name of the package archive.")

(defadvice package--add-to-archive-contents
  (around filter-packages (package archive) activate)
  "Add filtering of available packages using `package-filter-function', if non-nil."
  (when (or (null package-filter-function)
            (funcall package-filter-function
                     (car package)
                     (package-desc-vers (cdr package))
                     archive))
    ad-do-it))

(defvar melpa-exclude-packages
  '(slime)
  "Don't install Melpa versions of these packages.")

;; Don't take Melpa versions of certain packages
(setq package-filter-function
      (lambda (package version archive)
        (and
         (not (memq package '(eieio)))
         (or (not (string-equal archive "melpa"))
             (not (memq package melpa-exclude-packages))))))

  (package-initialize)
  (starter-kit-load "starter-kit-elpa.org")
#+end_src

#+results: starter-kit-elpa
: loaded starter-kit-elpa.el

** Work around OS X bug

Work around a bug on OS X where system-name is FQDN
#+srcname: starter-kit-osX-workaround
#+begin_src emacs-lisp
  (if (eq system-type 'darwin)
      (setq system-name (car (split-string system-name "\\."))))
#+end_src

** System/User specific customizations

You can keep system- or user-specific customizations here in either
raw emacs-lisp files or as embedded elisp in org-mode files (as done
in this document).

#+srcname: starter-kit-user/system-setup
#+begin_src emacs-lisp
  (setq system-specific-config (concat dotfiles-dir system-name ".el")
        system-specific-literate-config (concat dotfiles-dir system-name ".org")
        user-specific-config (concat dotfiles-dir user-login-name ".el")
        user-specific-literate-config (concat dotfiles-dir user-login-name ".org")
        user-specific-dir (concat dotfiles-dir user-login-name))
  (add-to-list 'load-path user-specific-dir)
#+end_src

You can keep elisp source in the =src= directory.  Packages loaded
from here will override those installed by ELPA.  This is useful if
you want to track the development versions of a project, or if a
project is not in elpa.

#+srcname: starter-kit-load-elisp-dir
#+begin_src emacs-lisp
(setq elisp-source-dir (concat dotfiles-dir "src"))
(add-to-list 'load-path elisp-source-dir)
#+end_src

* Load the rest of the starter kit core
The following files contain the remainder of the core of the Emacs
Starter Kit.  All of the code in this section should be loaded by
everyone using the starter kit.

** Starter kit defuns
Starter kit function definitions in [[file:starter-kit-defuns.org][starter-kit-defuns]]

#+begin_src emacs-lisp
(starter-kit-load "starter-kit-defuns.org")
#+end_src

** Starter kit misc
Miscellaneous settings in [[file:starter-kit-misc.org][starter-kit-misc]]

#+begin_src emacs-lisp
(starter-kit-load "starter-kit-misc.org")
#+end_src

** Starter kit registers
Registers for jumping to commonly used files in [[file:starter-kit-registers.org][starter-kit-registers]]

#+begin_src emacs-lisp
(starter-kit-load "starter-kit-registers.org")
#+end_src

* Language/Mode Specific Files
These sections pertain to specific languages or modes.  Feel free to
turn off these sections if you don't plan on using the related mode or
language.

** Starter kit yasnippet
Located in [[file:starter-kit-yasnippet.org][starter-kit-yasnippet]].

#+begin_src emacs-lisp
  (starter-kit-load "starter-kit-yasnippet.org")
#+end_src


** Starter kit Org-mode
Located in [[file:starter-kit-org.org][starter-kit-org]].

#+begin_src emacs-lisp
(starter-kit-load "starter-kit-org.org")
#+end_src

** Starter kit eshell
Located in [[file:starter-kit-eshell.org][starter-kit-eshell]]

#+begin_src emacs-lisp
(starter-kit-load "starter-kit-eshell.org")
#+end_src

** Starter kit lisp
Located in [[file:starter-kit-lisp.org][starter-kit-lisp]]

#+begin_src emacs-lisp
(starter-kit-load "starter-kit-lisp.org")
#+end_src

** Starter Kit Python
Located in [[file:starter-kit-python.org][starter-kit-python]]

#+begin_src emacs-lisp
(starter-kit-load "starter-kit-python.org")
#+end_src

** Starter Kit Text
Located in [[file:starter-kit-text.org][starter-kit-text]]

#+begin_src emacs-lisp
  (starter-kit-load "starter-kit-text.org")
#+end_src

* Load User/System Specific Files
** Settings from M-x customize
#+srcname: m-x-customize-customizations
#+begin_src emacs-lisp
  (load custom-file 'noerror)
#+end_src

** E-lisp customization
After we've loaded all the Starter Kit defaults, lets load the User's stuff.
#+srcname: starter-kit-load-files
#+begin_src emacs-lisp
  (if (file-exists-p elisp-source-dir)
      (let ((default-directory elisp-source-dir))
        (normal-top-level-add-subdirs-to-load-path)))
  (if (file-exists-p system-specific-config) (load system-specific-config))
  (if (file-exists-p system-specific-literate-config)
      (org-babel-load-file system-specific-literate-config))
  (if (file-exists-p user-specific-config) (load user-specific-config))
  (if (file-exists-p user-specific-literate-config)
      (org-babel-load-file user-specific-literate-config))
  (when (file-exists-p user-specific-dir)
    (let ((default-directory user-specific-dir))
      (mapc #'load (directory-files user-specific-dir nil ".*el$"))
      (mapc #'org-babel-load-file (directory-files user-specific-dir nil ".*org$"))))
#+end_src
