# OH-MY-ZSH {{{

ZSH=$HOME/.oh-my-zsh

ZSH_THEME="istib"


# Theme
zstyle ':omz:module:prompt' theme $ZSH_THEME

# Plugins and OMZ modules
plugins=(vi-mode zsh-syntax-highlighting history-substring-search django vundle osx)

zstyle ':omz:load' omodule 'environment' 'terminal' 'editor' 'completion' 'history' 'directory' 'spectrum' 'alias' 'utility' 'prompt' 'history-substring-search'

zstyle keymap 'vi'

# case-sensitivity for completion, history lookup
zstyle ':omz:*:*' case-sensitive 'no'

# Color output
zstyle ':omz:*:*' color 'yes'

# Auto set the tab and window titles.
zstyle ':omz:module:terminal' auto-title 'no'

source $ZSH/oh-my-zsh.sh

# }}}

# TERMINAL {{{

# for c-s and c-q
stty -ixon -ixoff

PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'


# }}}

# PATHS {{{

export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/usr/sbin:/sbin:/usr/X11/bin:/usr/texbin:/Applications:~/bin:/usr/local/share/python:$HOME/.rvm/bin

export NODE_PATH=/usr/local/lib/node_modules

export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh

# }}}

# BINDINGS {{{

# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets

bindkey -v 
# vi mode
bindkey "^F" vi-cmd-mode
bindkey jk vi-cmd-mode

bindkey '\ew' kill-region                           # [Esc-w] - Kill from the cursor to the mark
bindkey '^r' history-incremental-search-backward    # [Ctrl-r] - Search backward incrementally for a specified string. The string may begin with ^ to anchor the search to the beginning of the line.

bindkey '^[[A' up-line-or-search                    # start typing + [Up-Arrow] - fuzzy find history forward
bindkey '^[[B' down-line-or-search                  # start typing + [Down-Arrow] - fuzzy find history backward

bindkey '^[[H' beginning-of-line                    # [Home] - Go to beginning of line
bindkey '^[[1~' beginning-of-line                   # [Home] - Go to beginning of line
bindkey '^[OH' beginning-of-line                    # [Home] - Go to beginning of line
bindkey '^[[F'  end-of-line                         # [End] - Go to end of line
bindkey '^[[4~' end-of-line                         # [End] - Go to end of line
bindkey '^[OF' end-of-line                          # [End] - Go to end of line

# emacs style
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

bindkey ' ' magic-space                             # [Space] - do history expansion

bindkey '^f' forward-char
bindkey '^b' backward-char

bindkey '^[[1;5C' forward-word                      # [Ctrl-RightArrow] - move forward one word
bindkey '^[[1;5D' backward-word                     # [Ctrl-LeftArrow] - move backward one word

# Make the delete key (or Fn + Delete on the Mac) work instead of outputting a ~
bindkey '^?' backward-delete-char                   # [Delete] - delete backward
bindkey '^[[3~' delete-char                         # [fn-Delete] - delete forward
bindkey '^[3;5~' delete-char
bindkey '\e[3~' delete-char

# }}}

# EDITOR {{{

# seriously, though, what else?
export EDITOR="/Applications/MacVim.app/Contents/MacOS/Vim"

alias vim=$EDITOR
alias vi=$EDITOR
alias v=$EDITOR

# get the right emacs
alias emacs="/usr/local/bin/emacs-24.1.50"

# }}}

# PAGER {{{

alias less='less -rXeQw'
export MANPAGER="less"

# Less Colors for Man Pages
# http://linuxtidbits.wordpress.com/2009/03/23/less-colors-for-man-pages/
export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\E[0m'           # end mode
export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\E[38;33;246m'   # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'           # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline

# Highlight section titles in manual pages
export LESS_TERMCAP_md="$ORANGE"

# }}}

# HIGHLIGHTING {{{

source ~/dotfiles/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# }}}

# DIRECTORY CHANGING {{{

# only init if installed.
if [[ -f $HOME/.fasd ]]; then
  # Initialize fasd (https://github.com/clvv/fasd)
  eval "$(fasd --init posix-alias zsh-hook)"

  # aliases

  # jump to recently used items
  # alias a='fasd -a' # any
  # alias s='fasd -s' # show / search / select
  # alias d='fasd -d' # directory
  # alias f='fasd -f' # file
  alias z='fasd_cd -d' # cd, same functionality as j in autojump
fi


eval "$(fasd --init auto)"

# type directory name without cd
setopt AUTO_CD

# Fancy globbing http://linuxshellaccount.blogspot.com/2008/07/fancy-globbing-with-zsh-on-linux-and.html
setopt extendedglob


# }}}

# PROCESSES {{{

alias top="top -o cpu"
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

alias k="kill"
alias k9="kill -9"
alias ka="killall"
alias ka9="killall -9"

alias psa="ps aux"
alias psg="ps aux | grep "
alias psr='ps aux | grep ruby'

# }}}

# COMPLETION {{{

unsetopt correct_all

# matches case insensitive for lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

# }}}

# PACKAGES {{{

alias bi="brew install"
alias pi="pip install --upgrade"
alias brewer="brew update && brew upgrade && brew cleanup && brew doctor"

# Get OS X Software Updates, update Homebrew itself, and upgrade installed Homebrew packages
alias update='sudo softwareupdate -i -a; brew update; brew upgrade'

alias npkg='/usr/local/lib/node_modules'
alias bpkg='/usr/local/Cellar'

# }}}

# SHORTCUTS {{{

alias al="alias | grep"

alias _='sudo'
alias please='sudo'

# c-x c-e to edit current cmd in vim!
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

# alias f="/usr/local/bin/ranger"
alias f="vifm ."
alias m="mutt"
alias o="offlineimap -o"
alias t="tig"
alias ts="tig status"
alias tl="vim ~/Reference/tech_log.md"
alias spotify="osascript ~/bin/SpotifyControl.scpt"
alias lb="open /Applications/LaunchBar.app"

alias y="yeoman"

alias ni="npm install -g"

alias xx='exit'
alias n="newsbeuter -o"
# alias t="rvmd && earthquake"
alias ms="ncmpcpp"

alias pj="cd ~/Projects/"
# requires osx zsh plugin
alias ql="quick-look"

alias whereami='doko'
alias hc='http-console'

# open files directly in editor
alias -s tex=vim
alias -s html=vim
alias -s txt=vim
alias -s md=vim

alias -g G='| grep'
alias -g M='| less'
alias -g L='| wc -l'
alias -g N="| /dev/null"
alias -g S='| sort'
alias -g C='| wc -l'
alias -g H='| head'
alias -g ONE="| awk '{ print \$1}'"

# Easier navigation: .., ..., ...., ....., ~ and -
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~"

alias op="open"
alias oo="open ."

# Enable aliases to be sudo’ed
alias sudo='sudo '

# clone github project from clipboard
alias youtube='pbpaste | xargs youtube-dl -t --extract-audio --audio-format mp3'

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en1"
alias ips="ifconfig -a | grep -o 'inet6\? \(\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\)\|[a-fA-F0-9:]\+\)' | sed -e 's/inet6* //'"

# Enhanced WHOIS lookups
alias whois="whois -h whois-servers.net"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# Canonical hex dump; some systems have this symlinked
# type -t hd > /dev/null || alias hd="hexdump -C"

# OS X has no `md5sum`, so use `md5` as a fallback
# type -t md5sum > /dev/null || alias md5sum="md5"

# Recursively delete `.DS_Store` files
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

# find files by filename in OSX
# (leverages `mdfind` which is indexed and grep the results
# -- there's most likely a better way of doing)
function mfind() { 
  mdfind "$1" | grep "$1" | less;
}

# File size
alias fs="stat -c \"%s bytes\""

# ROT13-encode text. Works for decoding, too! ;)
alias rot13='tr a-zA-Z n-za-mN-ZA-M'

# Empty the Trash on all mounted volumes and the main HDD
# Also, clear Apple’s System Logs to improve shell startup speed
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv ~/.vifm/Trash; sudo rm -rfv /private/var/log/asl/*.asl"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.Finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.Finder AppleShowAllFiles -bool false && killall Finder"

# Disable Spotlight
alias spotoff="sudo mdutil -a -i off"
# Enable Spotlight
alias spoton="sudo mdutil -a -i on"

# }}}

# FILE MANAGEMENT {{{

# Show human friendly numbers and colors
alias df='df -h'
alias ll='ls -alGh'
alias ls='ls -Gh'
alias du='du -h -d 2'

alias rmdir="rm -rf"

# create intermediary directories
alias md='mkdir -p'

# mkdir & cd to it
function mcd() { 
  mkdir -p "$1" && cd "$1"; 
}

# delete current dir
function rmd() { 
  # TODO
  # cd .. && rm -rf (what to put here??)
}

function i() {
  (head -n 5; tail -n 5) < "$1" | column -t
}

# (f)ind by (n)ame
# usage: fn foo 
# to find all files containing 'foo' in the name
function fn() { ls **/*$1* }

# File renaming
autoload -U zmv
alias zmv="noglob zmv -W"

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# Canonical hex dump
alias hd="hexdump -C"

# Empty the Trash on all mounted volumes and the main HDD
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; rm -rfv ~/.Trash"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"



# }}}

# ZIPPING {{{

alias gz='tar -zcvf'

# Get gzipped file size
function gz() {
	echo "orig size (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# creates an archive from given directory
mktar() { tar cvf  "${1%%/}.tar" "${1%%/}"; }
mktgz() { tar cvzf "${1%%/}.tgz" "${1%%/}"; }
mktbz() { tar cvjf "${1%%/}.tbz" "${1%%/}"; }
mkzip() { zip -r   "${1%%/}"     "${1%%/}"; }


# easy extract
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1    ;;
            *.tar.gz)    tar xvzf $1    ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       rar x $1       ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xvf $1     ;;
            *.tgz)       tar xvzf $1    ;;
            *.tbz2)      tar xvjf $1    ;;
            *.tbz)       tar xvjf $1    ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# }}}

# LS {{{

# List all files colorized in long format
alias l="ls -Gl"

# List all files colorized in long format, including dot files
alias la="ls -Gla"

alias lk='ls -lShr'          # list by size
alias la='ls -A'             # show hidden files
alias lla='ls -Al'           # show hidden files
alias lr='ls -lR'            # recursice ls
alias lt='ls -ltr'           # sort by date
alias lm='ls -al |more'      # pipe through 'more'
alias tree='tree -Cs'        # nice alternative to 'ls'
alias ll='ls -l'             # long listing

alias l.='ls -ldA .*'

# List only directories
alias lsd='ls -l | grep "^d"'

# alias ls='ls -lAhFG'
alias lf='ls -f'
# show me files matching "ls grep"
alias lg='ls | grep '
alias lsg='ls | grep '


# Always use color output for `ls`
if [[ "$OSTYPE" =~ ^darwin ]]; then
	alias ls="command ls -G"
else
	alias ls="command ls --color"
	export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
fi

# (f)ind by (n)ame
# usage: fn foo 
# to find all files containing 'foo' in the name
function fn() { ls **/*$1* }

# }}}

# HISTORY {{{

alias h="history | tail -n 10"

# keep TONS of history
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

setopt append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups # ignore duplication command history list
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history
setopt share_history # share command history data

# vi style incremental search
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward 
bindkey "^P" history-search-backward

# }}}

# TMUX {{{

[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator

alias tm="TERM=screen-256color-bce tmux"
alias tms="tmuxinator start"
alias tls="tmux ls"
alias ta="tmux at -t"
alias tk="tmux kill-session -t"
alias tka="~/bin/tmux-killall"
alias tn="tka & tm"

# }}}

# CLOJURE {{{

alias clj="~/Projects/clojure/clojure.sh"
export VIMCLOJURE_SERVER_JAR="$HOME/.vim/bundle/vimclojure/bin/server-2.3.3.jar"

# }}}

# RUBY {{{

alias rvmd="rvm default 1.9.3"
alias ru1="rvm default 1.9.1"
alias ru2="rvm default 1.9.2"
alias ru3="rvm default 1.9.3"

# }}}

# SEARCH {{{

alias ack="nocorrect ack"
# from: http://joshbetz.com/2012/07/ack-shortcuts/
#
# A shortcut function called a that runs a similar command and automatically wraps double quotes around the entire arguments string.
# It checks that there were actually arguments specified and then runs ack with --before-context=10 to show the 10 lines before every result, --pager='less -FRX' so the results are paged and the formatting is kept (it also automatically quits if the results aren’t longer than one page), and "$*" which takes all the arguments and wraps them in double quotes

function ac() {
  if [[ $ARGC -eq 0 ]]
  then ack
  else ack --before-context=10 --pager='less -FRX' "$*";
  fi
}

alias pygrep="grep --include='*.py' $*"
alias jsgrep="grep --include='*.js' $*"
alias cfgrep="grep --include='*.coffee' $*"

# }}}

# NETWORK {{{

alias serve='http-server'
# alias hosts='sudo vim /etc/hosts' 

alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en1"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias whois="whois -h whois-servers.net"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""
alias pg="ping www.google.com"

# lists known hosts
function hosts() {
 cat ~/.ssh/config | grep '^Host' | awk '{ print $2 }'
}

# One of @janmoesen’s ProTips
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
	alias "$method"="lwp-request -m '$method'"
done

# }}}

# PYTHON {{{

alias p='python'

# Unbreak Python's error-prone .pyc file generation
export PYTHONDONTWRITEBYTECODE=1

export PYTHONPATH=usr/local/lib/python2.7/site-packages:$PYTHONPATH

# Django stuff

alias pm='python manage.py'
alias pmr='python manage.py runserver'
alias pmc='python manage.py collectstatic --noinput'
alias pms='python manage.py syncdb --noinput'
alias pmg='python manage.py gen_data'
alias pmt='python manage.py test --noinput'

# }}}

# JSON {{{

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# `cat` with beautiful colors. requires Pygments installed.
alias c='pygmentize -O style=monokai -f console256 -g'


# }}}

# GIT {{{

# http://talkings.org/post/5236392664/zsh-and-slow-git-completion
__git_files () {
  _wanted files expl 'local files' _files
}

completion=/usr/local/etc/bash_completion.d/git-completion.bash

if test -f $completion
then
  source $completion
fi

alias g="git"

# use shortcuts from gitconfig (to avoid confusion), and make slightly shorter

alias ga='git a'
alias gaa='git aa'
alias gam='git am'

alias gc='git c'
alias gcm='git c'
alias gca='git ca'

alias gco='git co'
alias gcoh='git co -f'
alias gcom='git com'
alias zz='git co' # "z quick-jump" for git

alias gb='git b'
alias gbn='git bn'
alias gbd='git bd'
alias gbl='git branches'

alias gs='git s'
alias gss='git ss'
alias gsa='git sa'
alias gsd='git sd'
alias gsl='git sl'
alias gsh='git show'
alias gi='vim .gitignore'

alias guns='git unstage'
alias gunc='git uncommit'
alias gm='git merge'
alias gr='git rebase'
alias gra='git rebase --abort'
alias grc='git rebase --continue'
alias gri='git rebase --interactive'

# git log {{{

alias gl='git l'
alias gll='git gl'
alias glr='git lr'

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
function glc() {
  local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
  # [[ "$remote" ]] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  git log $* --name-status --color | awk "$(cat <<AWK
    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
    /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
    /.*/ {print \$0}
AWK
  )" | less -F
}
# }}}

alias gf='git fetch'
alias gpl='git pull'
alias gplr='git pull --rebase'

alias gplm='git pull && git merge origin/master'

alias gp='git push'
alias gpm='git push origin master'
alias gpom='git push origin master'

alias gd='git diff'
alias gdiff='git diff'
alias gdc='git diff --cached'


alias grs='git reset' 
alias grsh='git reset --hard && git clean -f'

alias gcln='git clean'
alias gclndf='git clean -df'

alias gsm='git submodule'
alias gsmi='git submodule init'
alias gsmu='git submodule update'

alias gt='git tag'
alias gal='git alias | grep'

# clone github project from clipboard
alias gcl='pbpaste | xargs git clone'

# git function to add last parameter of last command via git add (used after a diff)
galst() {
  last_command=$history[$[HISTCMD-1]]; 
  last_commandt_command_array=("${(s/ /)last_command}") 
  echo $last_command_array[-1];
  git add $last_command_array[-1];
}
# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}



# }}}

# LAST COMMAND {{{

# Use Ctrl-x,Ctrl-l to get the output of the last command
zmodload -i zsh/parameter
insert-last-command-output() {
LBUFFER+="$(eval $history[$((HISTCMD-1))])"
}
zle -N insert-last-command-output
bindkey "^X^L" insert-last-command-output

# }}}

# CONFIG {{{

alias ze='vi ~/dotfiles/zsh/zshrc'
alias ve='vim ~/dotfiles/vim/vimrc.vim'
alias ge='vim ~/dotfiles/git/gitconfig'
alias te='vim ~/dotfiles/tmux/tmux.conf'

# }}}

# CUSTOM {{{

source ~/dotfiles/zsh/personal.zsh

if [[ -a ~/.secrets ]] then
  source ~/.secrets
fi

# }}}

